%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Diff_net.pdf
%%Creator: Adobe Acrobat 11.0.13
%%For: Donghyeon
%%CreationDate: 2015-10-31, ¿ÀÈÄ 5:21:30
%%BoundingBox: 0 0 299 296
%%HiResBoundingBox: 0 0 298.3564 295.0535
%%CropBox: 0 0 298.3564 295.0535
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 928 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2015-10-31T17:20:53"
   xmp:CreatorTool="R"
   xmp:ModifyDate="2015-10-31T17:21:23+09:00"
   xmp:MetadataDate="2015-10-31T17:21:23+09:00"
   pdf:Producer="R 3.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:22a93ce7-9776-43a7-9122-3cd9f587d2f6"
   xmpMM:InstanceID="uuid:5a787ebe-8edf-4f2d-8e15-ccc2dd10a9eb">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">R Graphics Output</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -295.053 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 295.053 li
298.356 295.053 li
298.356 0 li
cp
clp
1.5 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
172.647 32.0327 mo
172.347 32.0927 li
170.967 32.3327 li
169.077 32.6727 li
167.467 32.9627 li
166.197 33.1927 li
165.697 33.2827 li
164.487 33.5027 li
163.047 33.7627 li
161.217 34.0827 li
159.497 34.3927 li
158.777 34.5227 li
158.747 34.5327 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.426368 .347875 .353155 .00985733 cmyk
@
182.717 30.3827 mo
183.007 30.3427 li
184.267 30.1527 li
185.847 29.9127 li
187.107 29.7327 li
188.127 29.5727 li
189.147 29.4227 li
190.417 29.2327 li
191.987 29.0027 li
193.247 28.8127 li
193.537 28.7727 li
@
196.247 258.243 mo
195.967 258.343 li
194.717 258.773 li
193.157 259.313 li
191.917 259.753 li
190.897 260.103 li
189.887 260.463 li
188.647 260.893 li
187.087 261.443 li
185.837 261.873 li
185.557 261.973 li
@
151.617 255.873 mo
151.447 255.673 li
150.537 254.673 li
149.047 253.033 li
147.577 251.403 li
146.367 250.063 li
145.357 248.953 li
144.937 248.483 li
143.967 247.413 li
142.857 246.193 li
141.497 244.693 li
139.957 242.983 li
138.727 241.623 li
138.267 241.113 li
138.247 241.103 li
@
151.007 262.783 mo
150.777 262.963 li
149.667 263.823 li
148.137 265.013 li
146.807 266.043 li
145.767 266.853 li
145.287 267.223 li
144.307 267.983 li
143.137 268.883 li
141.667 270.033 li
140.237 271.133 li
139.597 271.633 li
139.567 271.653 li
@
160.087 260.443 mo
160.377 260.483 li
161.757 260.703 li
163.757 261.013 li
165.547 261.293 li
166.967 261.513 li
167.887 261.653 li
169.167 261.853 li
170.667 262.093 li
172.557 262.383 li
174.497 262.683 li
175.567 262.853 li
175.687 262.873 li
@
170.247 207.173 mo
169.997 207.363 li
168.877 208.213 li
167.447 209.303 li
166.277 210.183 li
165.337 210.893 li
165.227 210.983 li
164.297 211.683 li
163.167 212.543 li
161.747 213.613 li
160.537 214.523 li
160.207 214.783 li
@
152.357 221.313 mo
152.167 221.493 li
151.147 222.413 li
149.547 223.873 li
148.007 225.273 li
146.767 226.413 li
145.707 227.373 li
145.477 227.593 li
144.447 228.533 li
143.257 229.613 li
141.777 230.963 li
140.147 232.453 li
138.947 233.553 li
138.597 233.873 li
@
28.7566 167.853 mo
29.0266 167.913 li
30.3666 168.223 li
32.4366 168.693 li
34.3766 169.133 li
35.9266 169.493 li
37.2566 169.793 li
37.3266 169.813 li
38.6566 170.113 li
40.1866 170.463 li
42.1066 170.903 li
44.1866 171.373 li
45.5966 171.693 li
45.9066 171.763 li
@
236.787 239.003 mo
236.977 238.853 li
237.817 238.173 li
238.857 237.313 li
239.687 236.633 li
240.367 236.083 li
241.047 235.523 li
241.877 234.843 li
242.927 233.993 li
243.757 233.313 li
243.947 233.153 li
@
173.717 98.1627 mo
173.527 97.9627 li
172.677 97.1027 li
171.607 96.0227 li
170.757 95.1527 li
170.067 94.4527 li
169.377 93.7527 li
168.527 92.8827 li
167.467 91.8027 li
166.607 90.9427 li
166.417 90.7427 li
@
231.267 194.623 mo
231.327 194.393 li
231.597 193.413 li
231.937 192.193 li
232.217 191.213 li
232.437 190.413 li
232.657 189.613 li
232.937 188.633 li
233.277 187.403 li
233.547 186.423 li
233.607 186.203 li
@
149.627 32.3827 mo
149.377 32.2027 li
148.257 31.3627 li
146.777 30.2527 li
145.547 29.3427 li
144.567 28.6127 li
144.347 28.4427 li
143.387 27.7327 li
142.237 26.8727 li
140.787 25.7927 li
139.497 24.8327 li
139.067 24.5027 li
139.057 24.5027 li
@
150.667 39.5227 mo
150.477 39.7727 li
149.637 40.8927 li
148.527 42.3827 li
147.607 43.6227 li
146.867 44.6027 li
146.687 44.8527 li
145.967 45.8027 li
145.107 46.9627 li
144.017 48.4127 li
143.047 49.7227 li
142.707 50.1727 li
142.707 50.1827 li
@
34.6866 190.523 mo
34.8666 190.323 li
35.7966 189.313 li
37.2666 187.713 li
38.6866 186.173 li
39.8366 184.913 li
40.8066 183.863 li
41.0566 183.593 li
42.0066 182.553 li
43.0966 181.373 li
44.4566 179.893 li
45.9566 178.263 li
47.0866 177.033 li
47.4266 176.663 li
@
28.8366 198.793 mo
28.6866 199.063 li
28.0266 200.303 li
27.1966 201.873 li
26.5166 203.143 li
25.9666 204.173 li
25.9366 204.253 li
25.3866 205.263 li
24.7266 206.513 li
23.8966 208.073 li
23.2066 209.373 li
23.0266 209.703 li
@
191.027 162.293 mo
190.947 162.063 li
190.627 161.043 li
190.227 159.763 li
189.907 158.743 li
189.637 157.913 li
189.377 157.083 li
189.057 156.063 li
188.657 154.783 li
188.327 153.763 li
188.257 153.533 li
@
73.0266 169.473 mo
72.7466 169.513 li
71.3866 169.723 li
69.2966 170.043 li
67.3666 170.343 li
65.8166 170.583 li
64.4766 170.793 li
63.1366 171.003 li
61.5966 171.243 li
59.6566 171.543 li
57.5766 171.863 li
56.2066 172.083 li
55.9266 172.123 li
@
83.1466 168.183 mo
83.4366 168.153 li
84.8266 168.013 li
86.8066 167.823 li
88.5466 167.653 li
89.9166 167.513 li
90.6766 167.443 li
91.9366 167.313 li
93.4266 167.163 li
95.3066 166.983 li
97.1866 166.793 li
98.1266 166.703 li
98.1966 166.693 li
@
84.0466 255.153 mo
84.2066 254.933 li
84.9866 253.793 li
86.1866 252.033 li
87.3266 250.363 li
88.2466 249.023 li
89.0266 247.873 li
89.1066 247.753 li
89.8866 246.613 li
90.7766 245.303 li
91.8966 243.673 li
93.1166 241.883 li
93.9666 240.643 li
94.1666 240.343 li
@
118.967 19.9527 mo
119.257 19.9727 li
120.527 20.0927 li
122.117 20.2427 li
123.387 20.3627 li
124.427 20.4627 li
125.457 20.5627 li
126.727 20.6827 li
128.317 20.8327 li
129.597 20.9527 li
129.877 20.9727 li
@
215.177 76.9527 mo
215.337 76.7427 li
216.067 75.8027 li
216.967 74.6327 li
217.687 73.6927 li
218.277 72.9227 li
218.867 72.1627 li
219.587 71.2227 li
220.497 70.0527 li
221.217 69.1127 li
221.387 68.9027 li
@
235.437 55.3827 mo
235.257 55.5427 li
234.427 56.2527 li
233.397 57.1527 li
232.567 57.8627 li
231.897 58.4427 li
231.227 59.0327 li
230.407 59.7427 li
229.377 60.6327 li
228.547 61.3527 li
228.357 61.5127 li
@
273.807 177.463 mo
273.847 177.203 li
274.007 176.053 li
274.217 174.623 li
274.377 173.473 li
274.517 172.543 li
274.647 171.603 li
274.817 170.453 li
275.017 169.023 li
275.187 167.873 li
275.227 167.613 li
@
77.5966 39.3627 mo
77.3566 39.3727 li
76.2766 39.4127 li
74.9266 39.4727 li
73.8466 39.5227 li
72.9766 39.5627 li
72.0966 39.6027 li
71.0166 39.6527 li
69.6766 39.7127 li
68.5966 39.7627 li
68.3466 39.7727 li
@
107.167 116.883 mo
106.897 116.943 li
105.557 117.243 li
103.467 117.713 li
101.487 118.153 li
99.8966 118.503 li
98.5466 118.803 li
98.3766 118.843 li
97.0366 119.143 li
95.4866 119.493 li
93.5566 119.923 li
91.4366 120.393 li
89.9566 120.723 li
89.5966 120.803 li
89.5866 120.803 li
@
117.037 117.243 mo
117.327 117.323 li
118.677 117.723 li
120.487 118.273 li
122.007 118.723 li
123.217 119.093 li
123.607 119.203 li
124.767 119.553 li
126.157 119.973 li
127.907 120.493 li
129.537 120.983 li
130.157 121.163 li
130.167 121.173 li
@
107.087 218.633 mo
106.947 218.883 li
106.247 220.103 li
105.257 221.823 li
104.397 223.323 li
103.707 224.513 li
103.337 225.163 li
102.707 226.263 li
101.967 227.563 li
101.027 229.193 li
100.087 230.823 li
99.6266 231.633 li
99.5866 231.693 li
@
48.5566 126.323 mo
48.3966 126.123 li
47.5466 125.083 li
46.1366 123.333 li
44.6766 121.533 li
43.4566 120.023 li
42.4466 118.783 li
41.8066 117.993 li
40.8566 116.823 li
39.7966 115.513 li
38.4966 113.913 li
36.9966 112.063 li
35.7066 110.463 li
35.1066 109.723 li
35.0466 109.653 li
@
51.6666 135.393 mo
51.6566 135.613 li
51.6366 136.833 li
51.5866 139.213 li
51.5266 142.143 li
51.4666 144.933 li
51.4166 147.323 li
51.3766 149.363 li
51.3366 151.203 li
51.3266 151.603 li
51.2866 153.423 li
51.2466 155.403 li
51.1966 157.703 li
51.1466 160.423 li
51.0766 163.363 li
51.0266 165.933 li
50.9966 167.423 li
50.9866 167.793 li
50.9866 167.803 li
@
56.7166 129.033 mo
56.9566 128.973 li
58.2366 128.643 li
60.4666 128.073 li
62.8666 127.463 li
64.9266 126.933 li
66.6366 126.503 li
68.1566 126.113 li
68.1866 126.103 li
69.7066 125.713 li
71.4066 125.283 li
73.4566 124.753 li
75.8566 124.143 li
78.1066 123.573 li
79.4066 123.243 li
79.6566 123.173 li
@
46.6766 130.643 mo
46.3966 130.653 li
45.0066 130.753 li
42.9466 130.893 li
41.0466 131.023 li
39.5466 131.123 li
38.3766 131.203 li
37.0566 131.293 li
35.5066 131.393 li
33.5766 131.533 li
31.5366 131.663 li
30.2766 131.753 li
30.0766 131.763 li
@
53.3866 125.453 mo
53.4666 125.203 li
53.8966 123.923 li
54.6066 121.803 li
55.3266 119.663 li
55.9166 117.883 li
56.4066 116.413 li
56.6766 115.623 li
57.1366 114.233 li
57.6666 112.643 li
58.3166 110.703 li
59.0566 108.483 li
59.6766 106.633 li
59.9366 105.853 li
59.9566 105.803 li
@
68.8366 82.8127 mo
68.7266 83.0927 li
68.2066 84.3927 li
67.4866 86.1927 li
66.8666 87.7427 li
66.3766 88.9727 li
66.1566 89.5127 li
65.6966 90.6627 li
65.1466 92.0427 li
64.4566 93.7727 li
63.7866 95.4327 li
63.4866 96.1827 li
63.4766 96.2127 li
@
75.9366 232.583 mo
76.2166 232.633 li
77.5866 232.863 li
79.6166 233.203 li
81.4566 233.513 li
82.9166 233.753 li
83.9766 233.933 li
85.2666 234.153 li
86.7866 234.403 li
88.6866 234.723 li
90.6766 235.053 li
91.8466 235.253 li
92.0166 235.283 li
@
70.7566 226.643 mo
70.7466 226.323 li
70.7066 224.923 li
70.6566 223.123 li
70.6166 221.653 li
70.5866 220.483 li
70.5766 220.333 li
70.5466 219.173 li
70.5066 217.753 li
70.4566 215.973 li
70.4166 214.463 li
70.4066 214.033 li
@
129.717 237.153 mo
129.487 237.143 li
128.217 237.103 li
125.857 237.033 li
123.147 236.943 li
120.707 236.873 li
118.667 236.803 li
116.907 236.753 li
115.937 236.723 li
114.247 236.663 li
112.397 236.603 li
110.187 236.533 li
107.587 236.453 li
104.927 236.373 li
102.967 236.313 li
102.197 236.283 li
102.157 236.283 li
@
267.677 103.223 mo
267.497 103.053 li
266.707 102.303 li
265.717 101.373 li
264.927 100.623 li
264.287 100.013 li
263.637 99.4027 li
262.847 98.6627 li
261.857 97.7227 li
261.067 96.9727 li
260.887 96.8027 li
@
30.0266 100.913 mo
29.9166 100.633 li
29.4166 99.3227 li
28.7466 97.5527 li
28.1866 96.0727 li
27.7366 94.8827 li
27.5866 94.5127 li
27.1566 93.3827 li
26.6466 92.0227 li
25.9966 90.3027 li
25.3866 88.7227 li
25.1666 88.1127 li
25.1566 88.1027 li
@
234.607 131.773 mo
234.857 131.843 li
235.947 132.153 li
237.317 132.533 li
238.417 132.843 li
239.307 133.093 li
240.197 133.343 li
241.287 133.643 li
242.657 134.023 li
243.757 134.333 li
244.007 134.403 li
@
130.977 272.483 mo
130.717 272.353 li
129.477 271.733 li
127.667 270.823 li
126.067 270.013 li
124.807 269.373 li
124.007 268.973 li
122.857 268.393 li
121.507 267.713 li
119.807 266.853 li
118.077 265.983 li
117.137 265.513 li
117.047 265.463 li
@
109.957 258.723 mo
109.827 258.503 li
109.157 257.333 li
108.047 255.393 li
106.917 253.413 li
105.977 251.773 li
105.207 250.403 li
104.767 249.643 li
104.037 248.363 li
103.207 246.903 li
102.187 245.123 li
101.017 243.083 li
100.037 241.363 li
99.6066 240.613 li
99.5766 240.563 li
@
93.4666 232.483 mo
93.3066 232.323 li
92.4166 231.423 li
90.7566 229.733 li
88.8466 227.793 li
87.1066 226.033 li
85.6566 224.553 li
84.4066 223.283 li
83.6566 222.533 li
82.4566 221.313 li
81.1566 219.993 li
79.5966 218.413 li
77.7666 216.553 li
75.8766 214.633 li
74.4666 213.203 li
73.8866 212.613 li
73.8466 212.573 li
@
67.8466 204.433 mo
67.7366 204.243 li
67.1466 203.153 li
66.0266 201.053 li
64.6666 198.543 li
63.4066 196.183 li
62.3266 194.183 li
61.4166 192.483 li
60.5666 190.923 li
59.7266 189.353 li
58.8066 187.643 li
57.7366 185.643 li
56.4666 183.293 li
55.1166 180.773 li
53.9866 178.683 li
53.4066 177.593 li
53.2966 177.403 li
@
.0370794 .0250858 .0250858 0 cmyk
%ADOBeginSubsetFont: AdobePiStd Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /AdobePiStd def
/FontInfo 7 dict dup begin
/Notice (Copyright 2002 Adobe Systems Incorporated. All rights reserved. Adobe is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /uni25CF put
def
/FontBBox {0 -196 1276 826} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 -0 725 750 500 525] def
/StdHW [50] def
/StdVW [50] def
/StemSnapH [50] def
/StemSnapV [50] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/uni25CF <1C60D8A8C9B6CAC20393B820A953E6ED15C444D2FC84BF4B10D0B3
0839933397D3264466EBB484089E8F13950BA5D9693EB673B9697E5F3B360819> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DQLYIH+AdobePiStd /AdobePiStd findfont ct_VMDictPut
/DQLYIH+AdobePiStd*1 
[127{/.notdef}rp /uni25CF 128{/.notdef}rp]
DQLYIH+AdobePiStd nf
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
172.067 36.0427 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
172.067 36.0427 mo
(\177) false chp
.75 lw
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
195.467 261.463 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
195.467 261.463 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
149.447 264.563 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
149.447 264.563 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
168.717 209.003 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
168.717 209.003 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
150.527 222.773 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
150.527 222.773 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
18.1766 171.623 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
18.1766 171.623 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
227.237 247.143 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
227.237 247.143 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
171.697 106.713 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
171.697 106.713 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
224.297 204.443 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
224.297 204.443 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
148.117 40.3427 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
148.117 40.3427 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
25.6266 199.193 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
25.6266 199.193 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
186.957 172.073 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
186.957 172.073 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
72.4666 173.593 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
72.4666 173.593 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
75.5666 264.283 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
75.5666 264.283 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
108.277 24.3827 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
108.277 24.3827 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
206.457 85.9027 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
206.457 85.9027 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
233.697 56.9427 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
233.697 56.9427 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
267.477 187.433 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
267.477 187.433 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
77.0966 44.0427 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
77.0966 44.0427 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
106.547 120.683 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
106.547 120.683 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
104.027 219.113 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
104.027 219.113 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
46.1666 135.203 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
46.1666 135.203 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
65.1366 82.9827 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
65.1366 82.9827 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
65.2966 236.653 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
65.2966 236.653 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.217 242.223 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.217 242.223 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
265.787 111.633 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
265.787 111.633 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
26.2366 110.593 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
26.2366 110.593 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
224.087 135.303 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
224.087 135.303 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.937 279.693 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.937 279.693 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
106.887 268.073 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
106.887 268.073 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
91.4466 241.033 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
91.4466 241.033 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
64.6566 213.843 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
64.6566 213.843 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
192.987 32.9227 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
192.987 32.9227 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
175.137 268.563 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
175.137 268.563 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
45.2766 177.813 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
45.2766 177.813 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
242.297 234.833 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
242.297 234.833 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
157.237 92.0127 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
157.237 92.0127 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
229.377 186.193 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
229.377 186.193 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.367 26.3627 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.367 26.3627 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
134.047 59.1727 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
134.047 59.1727 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
15.0366 219.123 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
15.0366 219.123 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
181.117 153.563 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
181.117 153.563 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
97.6766 171.103 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
97.6766 171.103 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
218.897 69.7627 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
218.897 69.7627 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
270.347 167.463 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
270.347 167.463 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
57.6466 44.9027 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
57.6466 44.9027 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
79.0066 126.823 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
79.0066 126.823 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.457 127.543 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
129.457 127.543 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
19.3766 137.023 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
19.3766 137.023 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
55.9766 105.863 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
55.9766 105.863 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
251.577 98.2127 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
251.577 98.2127 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
17.7466 88.2427 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
17.7466 88.2427 mo
(\177) false chp
@
.0370794 .0250858 .0250858 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
243.317 140.693 mo
(\177)sh
0 0 0 0 cmyk
DQLYIH+AdobePiStd*1 [14.14 0 0 -14.14 0 0 ]msf
243.317 140.693 mo
(\177) false chp
@
1 .980133 .101198 .114076 cmyk
%ADOBeginSubsetFont: ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d84000000cc000000606376
7420aa86dc6e0000012c0000065a6670676dc9bcda0500000788000007c1
676c79663d1a9a1e0000bb0000095cf868656164e437a1f700000f4c0000
003668686561123318ce00000f8400000024686d74780a5a7b0f00000fa8
000040146c6f63614f9c51a800004fbc000040186d6178701576099e0000
8fd4000000206e616d659b84420600008ff400001f21707265708d21ed41
0000af1800000be767646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200015
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
0471048304f900004046585756555441403f3e3d3c3b3a39383735343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c4523466020b02660b0
04262348482d2c452346236120b02661b004262348482d2c45234660b020
6120b04660b004262348482d2c4523462361b0206020b02661b02061b004
262348482d2c45234660b0406120b06660b004262348482d2c4523462361
b0406020b02661b04061b004262348482d2c0110203c003c2d2c20452320
b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920
b09051582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
172370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445
b01923442d2c2045b00325456164b050515845441b2121592d2cb0014363
2362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0
1243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a87
20b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0
022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20
b0032545b019234445b01a23444565234520b00325606a20b00923422368
8a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b0
3f1b235961441cb114008a5279b31940201945208a54582321b03f1b2359
61442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d
2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d
2c4b525845441b2121592d2c0120b003252349b04060b0206320b0005258
23b002253823b002256538008a63381b212121212159012d2c4bb0645158
4569b00943608a103a1b212121592d2c01b005251023208af500b0016023
edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500ed
ec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2b
b02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802232370
1020b802234520b0005058b00161593a2f182d2c21210c6423648bb84000
622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21
b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648b
b84000626023212d2cb4000100000015b00826b00826b00826b008260f10
161345683ab001162d2cb4000100000015b00826b00826b00826b008260f
1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b54
58381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54
b012435c5a58381b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b01060482046b0106048590a2121
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158
b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d
2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121
592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426
024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549
b00425b00425496120b0005458212043b0005558b00325b00325b8ffc038
b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043b00054
58b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121
212d2c462346608a8a462320468a608a61b8ff8062232010238ab902c202
c28a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c
b1020042b123018851b1400188535a58b910000020885458b20201024360
4259b12401885158b920000040885458b2020202436042b12401885458b2
022002436042004b014b5258b2020802436042591bb940000080885458b2
02040243604259b94000008063b80100885458b202080243604259b94000
010063b80200885458b202100243604259b12601885158b94000020063b8
0400885458b202400243604259b94000040063b80800885458b202800243
604259b12801885158b94000080063b81000885458ba0002010000024360
42595959595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b21
212121592d2c20b0024354b00123b05f237821b1000243b056237921b002
4323b020205c58212121b100471c598a8a208a208a23b81000635658b810
00635658212121b1012c1c591b2159b08062205c58212121b1001b1c5923
b08062205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b00243
54b00123b07b237821b1000243b072237921b10002438ab020205c582121
21b0631c598a8a208a208a23b81000635658b81000635658b00426b0015b
b00426b00426b004261b21212121b13600231c591b2159b0042623b08062
205c588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59
b00426b00161b8ff981c23212d000000000100000006deb8bb70c4805f0f
3cf5081b080000000000a2e3272a00000000cf71515efaaffd6710000851
00000009000100010000000000010000073efe4e00431000faaffa7a1000
000100000000000000000000000000001005060001000000000002390000
02390000023900b002d7005e0473001504730049071d0077055600580187
005a02aa007c02aa007c031d004004ac0072023900aa02aa0041023900ba
0239000004730055047300df0473003c047300560473001a047300550473
004d047300610473005304730055023900b9023900aa04ac007004ac0072
04ac00700473005a081f006f0556fffd0556009605c7006605c7009e0556
00a204e300a80639006d05c700a4023900bf040000370556009604730096
06aa009805c7009c063900630556009e0639005805c700a10556005c04e3
003005c700a105560009078d0019055600090556000604e300290239008b
023900000239002703c100360473ffe102aa00590473004a047300860400
0050047300460473004b02390013047300420473008701c7008801c7ffa2
0400008801c7008306aa00870473008704730044047300870473004802aa
00850400003f02390024047300830400001a05c700060400000f04000021
0400002802ac0039021400bc02ac002f04ac00570556fffd0556fffd05c7
0068055600a205c7009c0639006305c700a10473004a0473004a0473004a
0473004a0473004a0473004a040000500473004b0473004b0473004b0473
004b023900bd023900230239ffe502390009047300870473004404730044
047300440473004404730044047300830473008304730083047300830473
0049033300800473006b0473001b0473005102cd006d044c000104e30099
05e5000305e50003080000e102aa00de02aa003d0464004e080000010639
005305b4009a0464004e0464004d0464004d0473fffd049c00a003f40038
05b4007a069600a1046400000231000002f6002f02ec002d0625007f071d
004404e3008104e3009e02aa00e804ac0072046400540473002e04640033
04e5001a047300860473008c080000ef0556fffd0556fffd063900630800
0081078d00520473fffc0800000002aa005302aa004701c7008001c7006c
0464004e03f4002f04000021055600060156fe390473ffe402aa005c02aa
005c040000170400001704730049023900b901c7006c02aa004708000025
0556fffd055600a20556fffd055600a2055600a20239008d0239ffe00239
00040239001506390063063900630639006305c700a105c700a105c700a1
023900c602aa001902aa000602aa001d02aa002e02aa00e502aa00a202aa
006b02aa003a02aa004b02aa00280473000001c700030556005c0400003f
04e3002904000028021400bc05c7fffd0473004905560006040000210556
009e0473008704ac007204ac00a102aa006b02aa001902aa002106ac006b
06ac006b06ac0021047300000639006d04730042023900b10556005c0400
003f05c700660400005005c700660400005004730046046bffe102aa00ee
0556fffd0473004a0556fffd0473004a05c7009e04eb004705c7fffd0556
00a20473004b055600a20473004b0473009601c700420473009602550088
0473009602ac008305c7009c0473008705c7009c04730087063900630473
004405c700a102aa008505c700a102aa003c0556005c0400003f04e30030
0239002404e300300300002305c700a10473008305c700a10473008304e3
00290400002804e3002904000028046800a4063900600662005504a00048
047400480391006204f000440329002e05300048046bffe1040000b002eb
005208c000330800004f040000990800004f040000990800004f04000098
0400009807d5016a05c0009e04ab007204d5009d04ac007104d5022204d5
010505abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e
05abffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab
01c005ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c0
05abffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
02d605ab006605abffea05d5ffff04d500920800000007eb013007eb0120
07eb013007eb012004d500b204d5008004d5002a082b0198086b01b80755
0010060000f40600006f0440003a0540003704c0003f0415004004000025
0600005505e100bf038d008904d5ffd90180008002d50086071500610296
000f04d5009202d6008302d6008304d500b202d600700556fffd0473004a
05c700660400005005c7006604000050055600a20473004b055600a20473
004b055600a20473004b0639006d047300420639006d047300420639006d
0473004205c700a40473008705c7001f047300060239ffce0239ffce0239
ffe40239ffe40239fff60239fff50239004b01c700190400003701c7ffa2
0556009604000088040000860473009601c7006a05c7009c0473008705c9
00a50473008b0639006304730044063900630473004405c700a102aa006a
0556005c0400003f04e300300239000c05c700a10473008305c700a10473
008305c700a10473008305c700a104730083078d001905c7000605560006
0400002101c700890556fffd0473004a08000001071d00440639005304e3
0081023900b9078d001905c70006078d001905c70006078d001905c70006
055600060400002101c7008a02aaffe10473001b04cd005a06ac006b06ac
002206ac002206ac004a02aa00e202aa006b02aa00de02aaffea0557ffff
0646ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7ff780556
fffd055600960558fffe055600a204e3002905c700a4023900bf05560096
0558000b06aa009805c7009c0533006d0639006305c700a40556009e04f2
009404e30030055600060556000906af007f05fb00610239000405560006
04a00048039100620473008b01c7006b04600088049a008c040000190387
00480473008b0473005c01c700890400008604000018049c00a00400001a
0395005c04730044048d008303db0056046000880433001105b4007a063f
005701c7ffc9046000880473004804600088063f0057055700a206eb0032
045500a105c000640556005c023900bf02390004040000370875000d0815
00a406d5003104a900a10515000a05c000a00556fffd054000a705560096
045500a1056b0000055600a20763000704d5004e05c000a105c000a104a9
00a10540001206aa009805c700a40639006305c000a00556009e05c70066
04e300300515000a061500520556000905eb009f05550057075500a10780
00a106550000071500a8054000a505c00055081500a405c7001a0473004a
0495005b0440008802eb008804ab00000473004b055afffb03ab00320478
0087047800870380008604ab00180580008c046b00880473004404550088
047300870400005003aa0026040000210695004b0400000f0495008a042b
0045066b008d0695008d0500002805c0008b042b00840415003006000089
0455001f0473004b0473000002eb00890415004b0400003f01c700880239
000901c7ffa20740001306800083047300000380008604000021046b0088
03e900a1034a008808000041089500a00585002d00000000000000000000
00000000000000000000000000000000000000000000000000000000ffac
00000000000001010000ffce0310007d0000ff37023300d20000030b0000
ff04023900b90481006904560032033100190411002d04d1009601f9009b
030f005f04ca009b04b8008c01f9009b0413002803b0005003b4003c04ca
009b04cf005001f9009b02d2003c0498005a043c00190488006e045f0073
03b1001903d4000a0466009604130028058e00640524002803f2009b03f2
009b03f2009b01e3005a0356005a0686009b01f900460413002804130028
03b4ff4903b4ff490448002d058e0064058e0064058e0064058e00640481
0069048100690481006904560032033100190411002d04d10096024b0000
034a000004b8008c024b00000413002803b0005003b4003c04cf005002d2
003c0498005a0488006e045f007303d4000a0466009604130028058e0064
0524002801f9009b0456003203b00050045f0073049b003c0000ffdc0000
ff250000ffdc0000fe51028d00ab028d00a002da0043034d007901a8ffba
000000460000004600000046000000460000004800000046000000460000
00460435017c0435012e043500b7043500810435012c043500be043500af
043500810435009a043500db04350085028d00c0043500b3060001000600
010002420036060001000435009e04350098043500cb0600010006000100
060001000600010006000100000000460600010006000100060001000600
010006000100060001000600010006000100051bffba0600010006000100
0600010005b5003a05b5003a01f4ffba01f4ffba06000100060001000600
0100060001000481003604350036043dffba043dffba03e9004a03e9004a
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba051b003204b500240300fff706000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010000000030000000460000004600000040
0000004606000100060001000000ffdc0000fe510000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ffdc
0000ff160000ffdc0000ff200000ffdc0473004a08000000060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100028d0011028d00300600010004ee
0015034d007901a8001301d6ffd701a8005601d600100375003203750032
01a8002d01d60013051b003204b5002401f4ffba01f4ffba01a8009301d6
001305b5003a05b5003a01f4ffba01f4ffba024200000300fff705b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3005f02b3005f02b3005f02b3
005f03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a002a039a
00360435ffba0327ffba045a002a039a00360435ffba0327ffba064f0027
064f00270224ffba021affba04a7004604a700460224ffba021affba04cf
002d04cf002d0327ffba0327ffba040d0047040d004701a8ffba01a8ffba
02b4002302b400230327ffba0327ffba043500450435004501f4ffba01f4
ffba024200360300fff7039affba0327ffba0375003203750032051b0032
04b50024051b003204b5002401f4ffba01f4ffba045a003104ce0041045a
002604ce0039045a005304ce004a045a005304ce004a0600010006000100
000000460000004606000100060001000600010000000046000000460600
010006000100000000480000004606000100060001000600010000000046
000000460000004600000046000000400000003006000100000000460000
004606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100028d00ca028d00c7028d00c606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100060001000100ffba
0800ffba1000ffba06dc0063053f004406d500a1055b00830000fddc0000
fc2f0000fca60000fe540000fcd70000fd730000fe290000fe0d0000fd11
0000fc670000fd9d0000fbf50000fc720000fed50000fed50000ff02041b
00a006ac006b06ac00190000feb60000fd730000fe080000fca60000fe53
0000fd110000fbc80000faf40000faaf0000fc720000fbaa0000fb6a0000
fcf10000fc7d0000fbdd0000fcc10000fb980000fdea0000fe840000fdc2
0000fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000fd580000
fc900000fd150000fc2c0000fc130000fc120000fb960000fb9601c70088
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b055600a20473004b
055600a20473004b055600a20473004b055600a20473004b055600a20473
004b055600a20473004b0239006301c7001f023900ba01c7007c06390063
047300440639006304730044063900630473004406390063047300440639
0063047300440639006304730044063900630473004406dc0063053f0044
06dc0063053f004406dc0063053f004406dc0063053f004406dc0063053f
004405c700a10473008305c700a10473008306d500a1055b008306d500a1
055b008306d500a1055b008306d500a1055b008306d500a1055b00830556
000604000021055600060400002105560006040000210556fffd0473004a
0239ffe201c7ffb0063900630473004405c700a10473008305c700a10473
008305c700a10473008305c700a10473008305c700a1047300830000fefe
0000fefe0000fefe0000fefe0455fffd02eb000c07630007055afffb04a9
00a10380008604a900a10380008605c700a4046b00880473fffd04000014
0473fffd04000014055600090400000f05550057042b0045055500a10473
00870605006304730055063900600473004405b5003a01f4ffba0224ffba
021affba04a7004601f4009e01f4001001f4001b01f4001001f4006b01f4
fff90227ffce0000000f0000fff502aa00a402aa00a40000001300000056
000000560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8001d01d6
fff501a8009301d6001303750032037500320375003203750032051b0032
04b5002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b30032
02b3003202b3005f02b3005f02b3005f02b3005f02b3005f02b3005f02b3
003802b3003802b3004902b3004903e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e
06c5ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435ffba0327
ffba064f0027064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba064f0027064f00270224ffba021affba04a70046
04a7004604a7004604a70046093e0032093e00320740ffba0740ffba067f
0014077600140327ffba041effba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba04350045
0435004501f4ffba01f4ffba043500450435004504350045043500450435
00450435004501f4ffba01f4ffba04350045043500450481003604350036
043dffba043dffba024200360300fff7031a001a031a001a031a001a0375
003203750032037500320375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032051bffba04b5ffba051b003204b5002401f4ffba01f4ffba03750032
03750032051b003204b5002401f4ffba01f4ffba051b003204b50024067f
0045067f0045067f0045067f004501a800280000fe290000fea20000fef3
0000ff1d0000ff120000ff920000fe7e08fc003208ad00320000ff880000
ffaf0000ff3f0000ff640000fe7e0000ff36018d000002f6fffd0000fe82
0000ff1004cd00320000ff580000ff580000ff640692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a039a0036
0435ffba0327ffba034d007902b400230242003601f4ffba0290ffba01f4
002f01f4003b01f4001201f400b101f4006d067f00140776001401f9009b
0000fee002bc000003f2009b045afff504cefff5045a005304ce004a045a
005304ce004a045a005304ce004a045a005304ce004a045a005304ce004a
045a005304ce004a04350071043500ad045a000f04ce000f047300140611
0014054000a7047300860540000a0473000a05c7005105c7006604000050
05c7fffd067a00140540004a04730046047400480556006e04d5005304e3
ffc40639006d04fe000f070c008701c700830239001f0556009604000088
01c7001504000018072000a405c7ffb80473008b0639006006f200630557
004406090014047300860556009e0556006b0400004f04f20094030b0044
0239002404e300140239002404e3003005fb006105c700a1062e00100400
002104e300290400002804e3002904e30031045c0044045c003f0473003c
0473005503ab003203e5002404730087021400bc034e00bc04ac00720239
00b00aaa009e09c7009e08640046087f009606aa0096039c008309c7009c
078e009c062b0087047300550556fffd0473004a0000fefe0556fffd0473
004a08000001071d00440639006d0473001a0639006d0473004205560096
040000880639006304730044063900630473004404e30029045c004c01c7
ffa20aaa009e09c7009e086400460639006d04730042084600a404f2009e
05c7009c047300870556fffd0473004a0556fffd0473004a055600a20473
004b055600a20473004b0239ff8a0239ff64023900040239fff606390063
04730044063900630473004405c700a102aaffcc05c700a102aa006805c7
00a10473007605c700a1047300830556005c0400003f04e3003002390024
045c0051037e001305c700a40473008705a600a404d6005e0486005e04e3
0029040000280556fffd0473004a055600a20473004b0639006304730044
0000fefd0639006304730044063900630473004406390063047300440556
000604000021047300570473004804730086047300860400001304000050
04730046047300460473005505e9005503ab004903ab0032050d0032040f
00440239ffb90473004204730042047800500402001904ef00190473008b
047300870473008701c7001901c7005702d90044029e0000026e001401c7
00830493008306aa008406aa008406aa00870473ffa60473008b046c0087
0473004406530044063f00570466004402aaffe402aaffe402aaffe402aa
008502aa008502aa008502aaffe40455008a0455008a0400003f01c7ffa2
0214ffb901c7ff7202cb00000239000f0239002404730019048c00540460
00880400001a05c7000604000018042800190400002804540028045c004c
045c0079040000240400005004000024040000500639006304400088040f
004904780050046b0088032e000004000008033b00880473004804000024
0400005007b7004607400046080b004605b30024036f002405c00024061c
0013054a0083050f008303e2001e0438006303110064031100640146ffce
01eb006401eb000001eb000002ea006403d90000029100000187005a02d7
005e01c7008001c7006c01c7008a02aa00fb02aa00fb02ca003202ca0032
04ac007004ac007004ac006504ac006502aa012102aa00de02aa005902aa
012102aa001d02aa005902aa00de023900b6023900b602aa00fb02aa00fb
02aa00a602aa00a602aa00a602aa001d02aaffe202aafffb029400000142
006402b8003202a0000002ca003203100096031000960310009603100096
0310009602aa006202aa006202aa002802aa001d02aa0047045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000fec10000fec60000fdac0000fed8
0000ff920000fee90000ff4c0000fea00000fec40000ffce0000ff660000
fea00000fed80000fed80000ff970000ff980000ff990000fff40000ff42
0000ff420000ff440000ff5f0000fe870000ffec0000ffa60000ff510000
ff510000ff510000fec90000ff1c000000000000fee90000ff4c0000ff93
0000ff2a0000ff560000ffce0000fe870000febb0000fec40000fec40000
fed80000fed80000feb30000fec90000fdad0000fec80000feb30000fec9
0000fdad0000fe160000fee60000ffa60000fe870000ff440000feba0000
ff230000ff9a0000fdac0000fe88000000000000feb00000ff980000fe93
0000ffa60000fe870000fe1c0000ff660000ff440000feb00000feb00000
feb00000ff030000ff520000fd1f0000ff530000ff530000ff530000feb5
0000feb50000ffc30000feae0000fedc0000fec70000fec80000fedc0000
fe1e0000ff420000ff510000feb70000feb002aa00de02aa005902aa00fa
049a007004600000062e001407aa0000062e0014047b004c063f005704cf
0044063900630473004405c700700400005004e300a8033b008804ff0000
043c0032060d000a049d0042072000a406aa0084056500630473008b0564
00a40400000a0556006b0556006b04e0000504c5001905e5005f046e0044
03b600140347002804cf00440495005b0400005001c7ffa2063900600389
004d03890050055600a205c000a10473004b047800870ab4006d04fe0010
0639001404e70014079900bf05b500880558000104000006072e00bf0590
008806a10078057b007a086d00bf06f0008804d5006603ab001f065f0039
058200480639006004730044066d0009050c001a066d0009050c001a0898
0063072c004406aa002004e6001c0987006d06d000500000fe370ab4006d
04fe001005c7006604000050040700140000fea60000febc0000ff980000
ff980000fc2b0000fc4c05c000a10478008705400004042b00140556009e
04730087055d00a40464008804d5004e03ab003204a900040380000005ef
002904490028070900a4052f0088091800a006f600880606003e042b0023
05c700660400005004e3003003aa0026076700310587002605550057042b
004506e4000a0554000a06e4000a0554000a023900bf07630007055afffb
055700a1046800860540001204ab001805c700a4046b008805c700a4046b
008805550057042b004506aa00980580008c02aa002e0556fffd0473004a
0556fffd0473004a08000001071d0044055600a20473004b060500630473
005507630007055afffb04d5004e03ab003204d5004e045c004c05c000a1
0478008705c000a1047800870639006304730044063900600473004405c0
004a0415002b0515000a040000210515000a040000210515000a04000021
05550057042b0045071500a805c0008b0540004a0473004607bf004a0703
004607a6006606860053054d00660413005307c3001207470018084600a4
070700880639006d0478005005f90030055300260000ff430000ff290000
ff6a0000ffac0000ff590000ff560000ff730000fed70000fe5c0000005e
0000ff560000ff56000000500000ff0b0000fe550000ff430000ff5c0000
ff750000ff640000ff560000ff0b0000ff8a0000ff560000ff430000ff43
0000ff640000ff75000000500000fddd0000ff750000ffad0000fefe0000
fefe0000fedf0000fedf0000ff580000ff200000fefe0556fffd0473004a
05560096047300860556009604730086055600960473008605c700660400
005005c7009e0473004605c7009e0473004605c7009e0473004605c7009e
0473004605c7009e04730046055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b04e300a802390013
0639006d0473004205c700a40473008705c700a40473008705c700a40473
008705c700930473006805c700a4047300870239ffdf01c7ff9202390020
023900060556009604000088055600960400008805560096040000880473
009601c7007e0473009601c7ffb90473009601c7ffa50473009601c7ffa3
06aa009806aa008706aa009806aa008706aa009806aa008705c7009c0473
008705c7009c0473008705c7009c0473008705c7009c0473008706390063
047300440639006304730044063900630473004406390063047300440556
009e047300870556009e0473008705c700a102aa008505c700a102aa0085
05c700a102aa005e05c700a102aa00260556005c0400003f0556005c0400
003f0556005c0400003f0556005c0400003f0556005c0400003f04e30030
0239002404e300300239002404e300300239ffff04e300300239000e05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a104730083055600090400001a055600090400001a078d001905c7
0006078d001905c70006055600090400000f055600090400000f05560006
0400002104e300290400002804e300290400002804e30029040000280473
00870239000305c70006040000210473004a01c7008904a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a000480556fffd0556
fffd06820013068200130682001306820013068200560682005603910062
0391006203910062039100620391006203910062061e0000061e0000076c
0000076c0000076c0000076c00000473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff301c7008101c7008101c7ff9b
01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7ffa203010000030100000491
00000491000004910000049100000491fff30491fff30473004404730044
04730044047300440473004404730044069d0000069d0000082d0000082d
000007c9000007c900000460008804600088046000880460008804600088
0460008804600088046000880682000007ae00000812000007ae0006063f
0057063f0057063f0057063f0057063f0057063f0057063f0057063f0057
065f0000065f000007ef000007ef0000078b0000078b0000078bffff078b
ffff04a0004804a0004803910062039100620473008b0473008b01c7ffe6
01c7006804730044047300440460008804600088063f0057063f005704a0
004804a0004804a0004804a0004804a0004804a0004804a0004804a00048
0556fffd0556fffd06820013068200130682001306820013068200560682
00560473008b0473008b0473008b0473008b0473008b0473008b0473008b
0473008b068f0000068f0000081f0000081f0000081f0000081f0000081f
fff3081ffff3063f0057063f0057063f0057063f0057063f0057063f0057
063f0057063f0057065f0000065f000007ef000007ef0000078b0000078b
0000078bffff078bffff04a0004804a0004804a0004804a0004804a00048
04a0004804a000480556fffd0556fffd0556fffd0556fffd0556fffd02aa
00e502aa00fd02aa00e502aa000602aa00060473008b0473008b0473008b
0473008b0473008b068200000682000006f3000006f3000005c700a402aa
001302aa001302aa000601c7ffbb01c7ffab01c7ffca01c7ffca01c7ff93
01c7ff930239001a0239fff5036500000365000002aa001302aa001302aa
000604600088046000880460008804600088048d0083048d008304600088
04600088055600060556000606e6000007180000061e000002aaffea02aa
ffea02aa0059063f0057063f0057063f0057063f0057063f005707650000
069d000007270000065f000005fb006102aa00de02aa00e50473000d05c7
006605c7006606aa008705c70024095000a1078d00190556001f04e30030
080000290400003004c100660000ff530000ff530000ff530000ff5301c7
001901c7ffa2042b0005055600110574004602cbffa3057a008702f0ffc8
057f000a057f000a02aa008402aa008402aa00c902aa00c902aa00a002aa
005902aaffaf02aa003a02aa0006023900b902aa00a902aa00a902aa00a9
02aa00a9032e001e032e001e02aa003a0000ff730000ffa50000fed80000
ff230000ff720000ff720000fee70000ffa50000ff530000ff530000ff53
0556009e0473008703f8001905fb0019071d004404400019040000500469
00870469001903eb008703ab003201c70088036100410400008803360010
0580008c04780087047300440400001304de004404de004404de000d078d
005003a800440473004404730044042b00840455001f0455001f03aa0026
0460008804c6004405de004404c600440400001a05c700060400002803ab
0032036b003f04db001f02eb00880400001a04550088042b008405b4007a
04ab001803a00000054f0000035100320351ffd103980032034800320348
003203f80032036e0032015600690284002d0366003202d0003204150032
03710032036f003204180032030f003203590032039c003203760031036f
003204fb000002fa003202fa00320304003204cc00320305006403050032
02f9003202f90032028c0032028c0032030400320142006402b600640495
0064030f00640305003202d5003203050032030500320306006401c20032
030f00640342003204950064029200000320000003150064029200000306
00320385003202bf00000142006401eb0064030f00640292000003150064
02920000030900320385003202bf0000077d00460a660046038300460a2f
00460541ffba01e9003c045a00110000ff0d0000ff350000fece0000feb7
0000fec90000ffcf0000ff4f0000ff9e0000feca02b3005f02b3005f03e9
004a03e9004a039affba0327ffba039affba0327ffba05ad0069053d002d
05fd009604dc005004e0003c05f6009b053f00280650002804ac00720000
000000000000000000000473fffc02aa005302d5ffce01a8ffba01a8ffba
01a8ffba01a8ffba0658001509c500470400000008000000040000000800
000002ab000002000000015500000473000002390000019a000000ab0000
0000000005e5000305c7006606aa00980580008c07440083071800460718
00480556fffd05c70066040000140473000a04e300300400004f04000028
04a5001d000001020000ff420000febf0000ff3a0000ff53048d000a05c7
005105c7006605c70051045500a102eb00880000ff430000ffac0000ffac
02d2009600000000021affba0250001e0000ff3a0000ff5b0000ff5f0000
ff7e0000ff940000ff4a0000fe9c05b5003a05b5003a01f4ff9601f4ff96
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba0481003604350036043dffba043dffba0481003604350036
043dffba043dffba02b3003202b3003202b3005f02b3005f03e9004a03e9
004a0692003e0692003e043fffba043fffba045a002a039a00360435ffba
0327ffba045a002a039a00360435ffba0327ffba045a002a039a00360435
ffba0327ffba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba067f0014077600140327ffba041effba067f00140776
00140327ffba041effba067f0014077600140327ffba041effba02b40023
02b400230327ffba0327ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba
043500450435004501f4ffba01f4ffba040d0047040d004701a8ffba01a8
ffba03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0473ff93047300460239ffbf06aaffd50473ffb70473ff9102aa
ffa402aaffa40400ffff0239ffb90400002804730089030b006404740048
0649002401c7001901c700190473001e0460001e048c000a047300860473
00460239001305b400420400008801c7fffc06aa00870473008b04730087
02aafffb0400003f0318ffa20400001a0400000f040000280473004a0473
0048047300460473004b03ab004903ab00320534005501c7008804000013
01c7ffa204730083045c004c0304006402d5003202c9003302fc0032028c
003201d5003201d500000304003203110064014200190142006401420064
01420019022a00000142006401420009023300640493006404930064030f
ffc9030f0064030e0064030500320300003202b800320142ffca01c20032
030f001d031a00320306006402d400640292000002de003202de003202de
003202f4003202ea00320000febc0000febc0000ff730000fea9023900b9
02fa003202f900320305003202a0000002f900320639006d0556fffd0473
000f05c7006602aa004104a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a0004801c7ff9b01c7ffab01c7ff9b01c7ffab01c7
ff9b01c7ffbb01c7ff9b01c7ffbb04600088046000880460008804600088
0460008804600088046000880460008801c7ffab01c7ffab01c7ffbb01c7
ffbb04600088046000880460008804600088045a005304ce004a03a00013
0556001105c700290558000b055600a20473004b0400003301c7ffa205e6
00630473004805c7000002aa000f05560006040000210400001304000050
0400001301c700830455fffd02eb0001055600090400000f055600090400
000f04d5005303ab00490540001204ab00180000fec60000fed40000fec6
0000fed40000fe5f0000fe5f0000ff720000ff730000fee7078b000a03eb
004c040000130473000a01c700150473fff40556001105c700a104730019
0239ff8b05c700a404730087055600960400008804e30029040000280400
003b049e00a403670088053000480000ff530000ffbc0000fefe0000fefe
0000fea40000fea401c7008805c900a505c7009c05c900a50000fecd0000
ff480000fec90000fece0000fec50000fed00000fed10000feee0000fed6
0000fedc0000fdd90639005804730048078d001905c70006059f00a40000
feb905dc006304c60009084c001906ba0006023900b9038000720187005a
0187005a0400009904000099023900b0023900b0023900b002aa00190000
00460000003b000000310000005600000044000000560000004a00000049
04e30030047300500473005c0312003f045000480446003d047300310450
003d047d00620427003f0473005604790054047300550319003b0473003c
047300560473003204730055047e0062042f004b04730053047b005505c5
006a05d3006305f800a6094a00a605f8009c0302003b054100a406390060
0472004601c7008903f80087020a00890473004e0250000e047800850473
005c0473005c0302003b020a008901c70088047100000489009804c3005c
04e70098046f009804080098052f005c04f0009801ea0098037300290489
009803bc009805c7009804ec00980531005c046d00980531005c04db0098
046d004a0410002904dd0091046800080659001e046f0008046c0008040e
001f0691000006aa005c03bc003805310031046f009804e7001404c30090
04710000047100000471000004710000047100000471000004c3005c046f
0098046f0098046f0098046f009801eafff401ea008e01eaffb601eaffda
04ec00980531005c0531005c0531005c0531005c0531005c04dd009104dd
009104dd009104dd0091046c000804710000047100000471000004c3005c
04c3005c04c3005c04c3005c04e7009804e70014046f0098046f0098046f
0098046f0098046f0098052f005c052f005c052f005c052f005c04f00098
04f2002e01eaff9601eaffbd01eaffd401ea003e01ea0087054300980373
00290489009803bc009803bc009803bc009803bc009804ec009804ec0098
04ec009804f500980531005c0531005c0531005c04db009804db009804db
0098046d004a046d004a046d004a046d004a046d004a0410002904100029
04100029040e002904dd009104dd009104dd009104dd009104dd009104dd
00910659001e0659001e0659001e0659001e046c0008046c0008046c0008
040e001f040e001f040e001f047100000691000005310031047100000489
009803ae009804710000046f0098040e001f04f000980531005c01ea0098
04890098045a000205c7009804ec0098042f004c0531005c04e60098046d
00980425006a04100029046c00080546004c046f00080543004c05310052
04710000046f009804f0009801ea008e0531005c046c00080531005201ea
ffda046c0008046f009805af002903ae009804c7005c046d004a01ea0098
01eaffda0373002906f4000f06b6009805da0029041600980463002304e6
009804710000048600980489009803ae00980469000f046f009806540023
041f004604e5009804e50098041600980469000f05c7009804f000980531
005c04e60098046d009804c3005c0410002904630023050d004c046f0008
04dc0098047d004c06280098061e0098057c003c05e700980455009804c6
004606af009804db00120323009802aa002202aa006b02aa001902aa0021
02aa001702aa002202aa002e02aa004902aa002a02aa003302aa002e02aa
003302aa002205c5006a05c5006a05c5006a05c5006a05c5006a05c5006a
05c5006a05c5006a05c5006a05c5006a05c5006a05d3006305d3006305d3
006305d3006305d3006305d3006305d3006305d3006305d3006305d30063
05d3006305f800a605f800a605f800a605f800a605f8009c05f8009c05f8
009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c0302003b
0302003b0302003b0302003b030200320302003b0302003b0302003b0302
003b0416ffac0302003b0302003b0302003b020a0089020a004e02690089
02a50089020a00070302003b0302003b0302003b0302003b030200320302
003b0302003b0302003b054100a404720046047200460472004604720046
047200460472004604720046047200460472004601c7ffa703f80087020a
0089020a004e0269008902a50089020a00070250000e0250000e0300000e
0250000e0478008504780085047800850478008504a0005702aa001702aa
002202aa004902aa002a04ee001504ed009d04ed009d060b001a04d50085
05e3008502260099022600890226002c0226001e02260063022600300226
001b0226001d0226001d022600290226001e022600260226001d02260008
022600280c9600460e0c00460000ffba0ed200460000ff5b0000ff910000
ffb70000ff9b0481003604350036043dffba043dffba0481003604350036
043dffba043dffba0692003e0692003e043fffba043fffba03e9004a03e9
004a0481003604350036043dffba043dffba01a8ffc301d6ff5f01a8ffe9
01d6ff85051b003204b5002401f4ffba01f4ffba051b003204b5002401f4
ffba01f4ffba051b003204b5002401f4ffba01f4ffba0375003203750032
0375003203750032067f0045067f0045067f0045067f0045048100360435
0036043dffba043dffba0692003e0692003e043fffba043fffba0692003e
0692003e043fffba043fffba04cf002d04cf002d0327ffba0327ffba04b4
ffe00500ffe00496ffe804e4ffe8075c003205da0032070e003205130039
0bb700000000fe2c0000fffc0000006b000000730000006b051b003204b5
002401f4ffba01f4ffba067f0014077600140327ffba041effba067f0014
077600140327ffba041effba051b003204b5002401f4ffba01f4ffba051b
003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba
0000fff5049e00a403cd000a04e3003003aa002605c000a104ac00870556
00960473005a0a6600440473007e0556001d07ae001206150018064e009e
05be008707a9000906da001f0556009604000086088c000d07130018090e
00a406ce008805c700a40455008805a300a2046f00870239001302390013
04740048062200bf032f000e04ba005c0474004905590014049b000a06aa
00980556fffd05dc00a50590004b02aaffe50473004403eb004c0146ffce
029200000556005c04e3002902390069063c00aa0b56ffc2084aff120b0c
00320ed2004401a8ffba01a8ffba01a8ffba01d6000201a8003201a80046
01a8ffba01a8001a0251003a01a8002901a8004601a8ffba01a8004801a8
ffba01a8002901a8ffba01a8004601a8ffba01a8006e01a8ffba01f4009e
01f4001001f4001b01f4001001f4fff9022e008d01f4006b0199004602bf
003202bf00320473000f02ea001302ea00130427fff70427fff7051b0032
051b0032051b0032051b0032051b0032051b0032051b0032051b00320480
00240480002403e5ffba048000240480002403e5ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba04a7ffba04a7
ffba04a7ffba04a7ffba064f0027064f00270224ffba021affba04a70046
04a700460224ffba021affba040d0047040d004701a8ffba01a8ffba02b4
002302b400230327ffba0327ffba051b003204b5002401f4ffba01f4ffba
051b003204b5002401f4ffba01f4ffba03b7004a03b7004a037500320375
0032036b0046036b00460000ff1e0000ff480000ff1e0000fee70000ff4f
0000fef90000ffb50000ff520000ff470000ffb50000ff520000ff470000
ff000000fea60000ff000000ff230000ff240000ff570000ff570000ff92
0000ff920000ff920000ff920000ff2f0000fed70000ff340000ff31045a
005304ce004a0000ffac033100190411002d04d10096052400280000ffac
0000ff2a028d00ab028d00a00444003c043d003c0444003c043d003c0444
003c043d003c0445003c0444003c043d003c04a70046028d00ab03270022
02300014017a002e0473001c00>
<000000000000006c0000006c0000006c0000006c00000118000001c00000
0362000005e8000007900000097a000009c000000a4000000ae600000bc6
00000c2e00000ca600000cec00000d2800000d9800000fdc000010f40000
134e00001582000017b0000019d600001c1000001cbc00001fe20000228a
000022e6000023a400002426000024960000251c0000260e0000280e0000
2ab400002ce600002e4a00002fda000030c60000319c00003380000034cc
000036240000375a000039bc00003a6400003dda00003fe8000041860000
42e000004528000047e800004b9000004cb000004e1a0000507c000053b6
0000574e000059c400005b2600005b9000005bfa00005c5e00005ce60000
5d1a00005d960000611a00006360000065e80000682c00006a5200006bd0
00006e38000070240000723c000073e40000770a0000789200007c380000
7e440000807a00008286000084780000859c00008a1200008b9600008d7c
00008ffc000096360000988a00009b8e00009d8e00009e8c00009ed80000
9fda0000a07a0000a0c60000a0fa0000a1360000a1780000a1de0000a224
0000a2580000a28e0000a2c40000a3140000a3560000a3a80000a3e00000
a4320000a4680000a4a80000a4ea0000a5280000a5720000a5b20000a5e0
0000a6180000a6680000a69e0000a6de0000a7180000a75c0000a7a60000
a7e20000a8120000a8560000a88e0000a91e0000a9a40000abb20000ad46
0000aef60000af420000afd60000b1fa0000b44e0000b63e0000b72a0000
b7ac0000b8160000b9340000ba900000bcd80000be3a0000bec80000bf72
0000c0360000c17e0000c3280000c4160000c4dc0000c5400000c5ae0000
c6d80000c7fc0000c88c0000ca6e0000ccc80000d01a0000d1100000d1b6
0000d2060000d2bc0000d3dc0000d57a0000d6140000d6d80000d7980000
d8000000d83c0000d8940000d8e20000dafa0000dd400000dd780000ddaa
0000ded40000e0000000e0ae0000e1520000e1f40000e2c60000e31a0000
e3500000e3a80000e4fa0000e56c0000e5c60000e73e0000e8aa0000e98a
0000e9bc0000ea580000eb7c0000edf20000ee2c0000ee700000eeac0000
ef0e0000ef500000ef960000efe20000f0140000f0680000f0a60000f0d6
0000f1140000f15a0000f19c0000f1da0000f25c0000f2ca0000f3c80000
f4040000f4840000f4b80000f55a0000f5e20000f64e0000f6b00000f71c
0000f8080000f8fa0000f92e0000f9620000f9920000f9d60000fa4e0000
fbd00000fdea0000fe1c0000fe560000ff50000100de0001011400010278
000102f4000103d4000104ca0001065a000107c4000109b200010aae0001
0af400010b2800010b6a00010ba400010bf800010c4000010c8a00010cba
00010cea00010ed200010f1000010f3800010f6800010f9c00010fc20001
0fe80001102c000111e20001135c00011382000113a8000113ec0001141c
0001144c000114a20001158000011692000116dc000117140001176e0001
17ac000117e0000118100001184c0001188c000118ca0001190600011948
0001197e000119ba000119fa00011a2000011a4400011a9400011bf00001
1c4600011c7a00011cc800011d1400011d5600011d8e00011dc400011e0c
00011eae0001204a000122120001239400012586000126d80001285c0001
293e00012ad800012b4200012b6a00012c0800012e9a00012eda00012f1a
00012f5a00012f9800012ff600013054000130c2000130e2000131cc0001
326c000132a2000132f00001333a00013384000133a0000133bc000133dc
000133fc0001341c0001343c0001346200013488000134ae000134d40001
35040001352c0001355400013580000135ac000135e00001360a00013636
0001366c00013696000136c2000136f8000137220001374c000137800001
37b0000137e400013828000138580001388c000138ce0001390200013934
00013976000139aa000139da00013a1c00013a6000013aa600013b020001
3b1e00013b3a00013b5600013b7200013b8e00013cfc00013fa800014218
000142340001424e0001426a00014286000142a2000142be0001431a0001
4354000143be0001448800014528000145fe0001467e0001470600014776
0001480c0001486a000148b00001490e0001497000014a3200014af00001
4b1c00014b7800014bbc00014d2800014e1c00014e5c00014e7800014ea4
00014edc00014f2800014f6800014f9c00014fcc00014ffc0001502c0001
5070000150a0000150d0000151100001514000015170000151a0000151e0
000152100001524000015270000152960001549a000154ca000154fa0001
564a00015800000158300001585e0001588e000158bc000158ec0001591a
0001593e000159620001599200015b0200015b2800015b4e00015ce00001
5d0600015d2a00015d5000015d7600015ed40001606c000160a4000160e4
0001612000016150000161760001619a000161ca000161fa000162ea0001
645200016482000164bc000164fc0001652c0001655c0001659e000165c4
000165ea0001662a0001666a0001669a000166da000167c4000168440001
69280001695800016988000169b8000169e800016a2400016a5600016a88
00016ab800016ae800016b2e00016b6000016b9000016bc600016c380001
6c6c00016e3a00016f3c000170cc000172fc0001754c000176de00017742
000177cc000177dc0001786a00017a6800017b9400017d0000017df00001
7f740001818e000183ba000184ac000184bc000184cc000185e4000185f4
000186040001861400018624000186340001876600018776000187860001
87fa0001880a000188da000188ea000189fc00018a0c00018a1c00018a2c
00018b8a00018d6800018daa00018de000018e1600018e4600018e760001
8eca00018ef20001907c000191c400019318000194800001960400019668
000197fa00019916000199260001993600019abc00019acc00019c320001
9d8c00019ec00001a01e0001a1a40001a36a0001a3aa0001a3e20001a418
0001a43e0001a46e0001a4940001a60a0001a63a0001a7700001a7800001
a7900001a7d20001a7e20001a9760001ab220001acac0001acd40001ad04
0001ae600001ae700001afa80001afb80001b0520001b1b20001b1c20001
b4280001b5b20001b7500001b7800001b8f60001ba280001ba380001ba48
0001ba580001bb320001bb420001bb520001bb620001bc5a0001bdd40001
bde40001bf0c0001c0400001c1920001c3260001c4440001c5d00001c6e2
0001c7180001c9540001c9f40001ca040001cb9a0001cd3c0001cdc00001
cf420001cf520001d1ba0001d33a0001d4ba0001d4ea0001d68a0001d810
0001d9d40001db000001db100001dc400001dc500001dc600001dd200001
dd300001df160001df260001e05c0001e16a0001e3160001e4cc0001e60e
0001e77e0001e8c60001e9180001eafa0001ec760001ecb40001ee5a0001
ee7e0001efbe0001efce0001efde0001f0160001f0260001f1b20001f31a
0001f48e0001f4b20001f4e20001f6500001f7020001f7c00001f7ee0001
f9a40001fa9c0001fb2a0001fc500001fcfe0001fdd20001fe1a0001fe92
0001ff520001ff780001ffba0002000e000200ea00020134000201660002
018e000201b4000201e80002022c00020270000202ae000203ec000204a4
000205c40002063a000207080002075a000207ec0002089c000209900002
09e400020a7a00020b3800020c2200020cd400020df400020e4600020ef0
00021026000210fe000211e4000212ea000213d0000214b2000215a60002
16440002174a00021844000218bc00021934000219aa000219e000021a3c
00021b0400021b1c00021b3400021b4c00021b6200021b7e00021c3e0002
1c5600021c6e00021c8600021c9e00021cb600021cce00021e6e00021e84
00021e9a00021eb000021ec800021f640002205e000220760002211a0002
2130000221460002215c000221740002218c000223240002248a000225ea
000226020002261a00022630000227a2000227ba000227d2000227ea0002
28020002281a0002294a0002297200022aae00022b3e00022be800022c6a
00022d2600022e3e00022f4c00022f800002300600023162000231e40002
322a000233340002337c00023480000234fc00023554000235d8000236c2
000237d8000238d40002397e00023a6e00023b4a00023c2e00023d160002
3dc600023e3e0002409c000240c6000240f0000241a8000241d200024314
0002441a000245040002452e0002455800024582000245ac000245d60002
475600024780000247aa000247d4000247fe00024828000248520002487c
000248a6000248da000249040002492e0002495800024ad200024ae20002
4bfc00024c0c00024c3600024c6000024c8a00024cb400024e5e0002507a
000251a8000251b800025334000253440002548a000256560002575c0002
58dc00025a7c00025ca000025dfa00025fdc000261200002624e0002633c
0002636600026390000263ba000263e40002640e00026438000264620002
648c000264b6000264e00002650a000265340002655e00026588000265b2
000267ee0002696a00026aae00026c9600026dde00026e0800026e320002
6e6200026e9200026ee200026f3200026f7200026fe40002703800027096
000270ec0002712200027164000271aa000271f4000272240002725c0002
728c000273c40002770a000277340002775e00027788000277b2000277dc
00027806000278300002785a00027884000278ae000278d8000279020002
792c0002795600027980000279aa000279d4000279fe00027a2800027a52
00027a7c00027aa600027ad000027afa00027b2400027b4e00027b780002
7ba200027ca400027cba00027ce400027cfc00027d0c00027d3800027d64
00027ea200027fe40002818a0002819a000282dc0002842c0002861c0002
87f00002890800028918000289a800028a3600028b3600028b4600028be6
00028bf600028d0c00028e5e00028f8e00028f9e0002906c0002907c0002
91f20002920200029316000293260002945a000295f0000296ac000296bc
000297ba00029914000299a0000299b000029ada00029c6600029d220002
9d3200029dce00029dde00029eac00029ebc00029f9400029fa40002a0ac
0002a0bc0002a2820002a2920002a3ea0002a3fa0002a6640002a6740002
a86e0002a87e0002a9e80002a9f80002aae80002aaf80002ac900002aca0
0002adbe0002adce0002af0e0002af1e0002af2e0002af3e0002b0b60002
b0c60002b0d60002b0e60002b2380002b3860002b4540002b5380002b6b8
0002b83a0002b93a0002ba4e0002bb920002bba20002bc900002bd6a0002
bf060002bf1e0002c03c0002c1420002c3400002c3500002c3600002c370
0002c4ba0002c4ca0002c5820002c5920002c6a00002c6b00002c79c0002
c7ac0002c8ca0002c8da0002c9780002c9880002c9980002ca860002cbfa
0002cd260002ce200002ce300002ce400002ce500002cfee0002d1a80002
d2760002d2860002d2b00002d2da0002d5600002d7c40002da480002dcba
0002de8a0002e0400002e06a0002e0940002e0a40002e0b40002e0de0002
e1080002e1320002e1420002e1520002e17c0002e1a60002e1b60002e1c6
0002e1f00002e21a0002e2440002e2540002e2640002e2740002e2840002
e2940002e2a40002e2ce0002e2de0002e2ee0002e3180002e3420002e36c
0002e3960002e3c00002e3ea0002e4140002e43e0002e4680002e4920002
e4bc0002e4e60002e5100002e53a0002e5640002e58e0002e5b80002e5e2
0002e60c0002e6360002e6600002e68a0002e6b40002e6de0002e7080002
e7320002e75c0002e7860002e7b00002e7da0002e8040002e82e0002e858
0002e8820002e8ac0002e8d60002e9000002e92a0002e9540002e97e0002
e9a80002e9d20002e9fc0002ea260002ea500002ea7a0002eaa40002eace
0002eaf80002eb220002eb4c0002eb760002eba00002ebca0002ec6a0002
ecae0002ed240002ed4e0002ed780002eda20002edcc0002edf60002ee20
0002ee4a0002ee740002ee9e0002eec80002eef20002ef1c0002ef460002
ef700002ef9a0002efc40002efee0002f0180002f0420002f06c0002f096
0002f0c00002f0ea0002f1140002f1480002f17c0002f1b00002f3420002
f4de0002f67a0002f8060002f84c0002f8920002f9000002f95c0002f9ae
0002fa1e0002faf60002fbc20002fc9a0002fd660002fe060002ff200002
ffd400030056000300b0000300f00003020e00030358000304f00003054c
000305aa000306060003066200030716000307cc00030878000309240003
09d000030a8800030b4000030bf800030c0a00030c1c00030c2e00030c40
00030c5200030cc000030d2e00030de600030df800030e0a00030e1c0003
0e2c00030e3e00030e5000030e6200030e7400030e8600030e9800030f46
00030ff2000310a00003114c000311e40003121e00031248000312720003
12c60003131800031394000313de0003145a000314ae0003153200031584
000315fa00031652000316b80003170e00031768000317e6000318320003
1890000318f40003194200031990000319e800031a3000031a5a00031a88
00031aae00031ae200031b1200031b4200031b9400031c0200031c580003
1ccc00031d2000031d9400031dda00031e4200031e8800031ee400031f14
00031f4e00031f7400031fa400031fca00031ff000032022000320520003
20a40003210a00032160000321c60003221a00032288000322ca0003232a
0003236c000323b8000323f20003242e00032468000324a4000324d80003
250a0003253a0003256a00032594000325ba000325e4000326120003263c
00032688000326cc000327020003273e00032772000327a0000327de0003
280e0003284800032872000328a0000328c6000328ec0003291800032974
000329a4000329d400032a0400032a3c00032a7000032a9e00032ace0003
2afe00032b2e00032b5e00032b9200032be800032c1c00032c7c00032cb0
00032d0800032d3c00032d9800032e3600032f0400033024000330ec0003
317c00033212000333fe000335fa00033772000338ee00033a9800033c4a
00033d3200033e6800033f600003407200034190000342c6000344300003
459e00034734000348b0000349c0000349d000034afc00034c3800034d4e
00034ed200034fac00035022000350d80003517e000352ee000353260003
53a0000354620003551c000355840003568a000357c00003588c000359ea
00035a6400035ade00035b5800035c1200035cc600035d2200035d7c0003
5dc400035e3400035eb000035efa00035f3400035f7a00035fbe00036010
00036062000360e400036166000361a8000361e80003621e000362540003
6282000362b0000362e4000363180003635a0003639c000363d800036414
0003644e00036488000364ba000364ec0003651e000365500003658a0003
65c400036606000366480003668a000366cc0003671a00036768000367aa
000367ec0003682c0003686c000368a6000368e00003692c000369780003
69b6000369f600036a3c00036a8200036abe00036b1400036b5000036b8c
00036bcc00036c0c00036c4800036c8400036cc400036d0400036d480003
6d8c00036de000036e6e00036eb000036ef200036f5a00036fc200036ff4
000370260003705e000370960003712c000371c20003720c000372560003
7292000372ce000373240003737a000373c40003740e00037466000374be
000374fe0003753e00037576000375ae000375f800037642000376800003
76be000377000003774200037796000377ea0003783000037876000378bc
0003790200037958000379ae00037a0400037a5a00037aa600037af20003
7b3e00037b8a00037bfe00037c7200037ce600037d5a00037d9800037dd6
00037e1400037e5200037e9000037ece00037f1200037f5600037fa20003
7fee0003804e0003809a000380d8000381260003823600038286000382d6
0003830e000383460003839c000383f200038466000384ca0003850c0003
854e000385a4000385f20003863e0003868a000386ca0003870a00038752
0003879a000388060003886000038898000388b0000388f0000389080003
89d800038ad400038b9400038c8200038cd800038d2e00038d8000038dd4
00038e3800038e9c00038ef200038f4800038fbe00039034000390760003
90b8000390fa0003913c0003917e000391c0000392160003926c000392be
000393120003939a0003941c000394bc0003955e0003959c000395da0003
96180003965400039692000396d00003970e0003974a0003982e0003991a
00039a3000039b4c00039c1600039ce000039dda00039ed400039fd20003
a0d00003a1ee0003a30c0003a4320003a5580003a65a0003a75c0003a7ee
0003a8800003a8be0003a8fc0003a9560003a9b00003a9e80003aa200003
ab300003ab400003ab880003abd00003ac280003ac800003acb20003ace4
0003ad260003ad680003ada20003addc0003ae200003ae640003aedc0003
af560003afe60003b02a0003b06a0003b0ec0003b16e0003b2c60003b2d6
0003b3240003b3720003b3ae0003b3ea0003b4300003b4760003b4c40003
b5120003b5620003b5b20003b60e0003b66a0003b7e00003b9480003b980
0003b9ba0003ba060003ba520003baa40003baf60003bb480003bb9e0003
bbda0003bc160003bc6c0003bcc00003bdf80003be980003bee60003bf26
0003bf600003c0f60003c37a0003c4260003c5bc0003c71a0003c7e80003
c98e0003cbe20003ce1a0003ce8e0003cf020003cf960003d0ba0003d0de
0003d1500003d25c0003d36c0003d47c0003d58a0003d7100003d7420003
d7e40003d80c0003d86e0003d8d00003d9320003d9940003d9d20003da10
0003da4a0003da840003dab00003dafc0003db360003db700003dccc0003
de200003de300003deee0003e0240003e0820003e19a0003e3280003e3ce
0003e5140003e5520003e5900003e5a80003e5fc0003e6240003e67e0003
e6e20003e72a0003e78c0003e7ec0003e85e0003e8da0003e9560003e9d8
0003ea640003eaf00003eb7a0003ebfa0003ec340003ec700003edd40003
ee9e0003eece0003eefe0003f0360003f1860003f1960003f2840003f358
0003f4500003f5460003f6c80003f8220003f8320003f94a0003f9f60003
fb380003fc8e0003fcea0003fe480003fed60004007c000401ee00040302
0004033a0004039e0004054e000406b80004071a00040882000409880004
0a3e00040aea00040c1200040d0000040de000040f200004104c00041166
000412d600041450000414600004154000041636000416e6000417e20004
188e0004199800041a8400041b4c00041c7000041d7400041ea200041fe0
0004214c0004228200042416000425be000426b6000427ca000428fc0004
29ee00042a2600042a7c00042b2a00042b3a00042b9c00042bf800042c5e
00042caa00042cea00042d2200042d4e00042d7c00042db600042eec0004
2f2000042fa40004305a0004308a0004310e0004313e000431760004330e
0004349a000434e40004351e00043574000435c0000435e60004360c0004
364e00043690000436d2000437020004373a00043770000437a6000437e8
00043818000438480004393e00043a4200043a7600043aae00043af40004
3b2800043b5800043b9000043bc400043bf800043c2800043c5800043c8e
00043cc400043cf400043d2400043d5800043d8c00043dbc00043dec0004
3e2600043e5a00043e8c00043ebe00043ef200043f2600043f5600043f86
00043fb400043fe2000440f00004425c00044390000444c4000444f40004
452e000445c8000447320004488e0004495200044a6600044a9600044aca
00044bc200044d7200044dca00044e4200044f7e00044fbc0004502e0004
505e0004508e000450c80004515000045180000451b0000453420004548c
00045598000456a6000457d20004592800045a8400045be400045d1e0004
5e9000045ff000046000000461b6000462de000463780004650000046510
0004660c00046792000468ea0004699c00046a6c00046b7800046c220004
6c7000046cc000046d7000046e1600046e9200046fe2000470d6000471cc
000472d8000473b00004748a0004751e00047630000477c0000478de0004
79d400047a7e00047b2800047bf200047c9a00047d7000047dec00047e4a
00047fac000480e00004827c0004833e0004843e00048518000486560004
8702000487cc000488bc0004898a00048a6600048b9200048cca00048dba
00048e5800048f4a000490ba000492040004947000049542000495f60004
96c4000497b8000498f60004990600049a3a00049b4c00049b5c00049c68
00049d9800049dec00049f600004a0880004a19c0004a34e0004a5620004
a7f60004a9b00004aadc0004acbc0004ae7e0004b0100004b0dc0004b278
0004b2ee0004b39c0004b4780004b5040004b5a60004b6480004b72c0004
b8640004bac00004bc080004bc180004bc280004bc8a0004bce80004bd4a
0004bde80004be800004bf840004c0720004c0820004c0920004c12c0004
c1c60004c2020004c27e0004c2f20004c3480004c37c0004c4020004c48e
0004c5060004c5640004c5fe0004c6900004c7100004c7920004c8260004
c85a0004c8bc0004c96e0004cb340004cb6c0004cd480004ce5c0004ce6c
0004cea20004cee60004cf2a0004cf6e0004cfa40004cfd60004d0180004
d0b40004d10a0004d1b00004d2280004d2ae0004d31e0004d3800004d406
0004d4660004d4d00004d5440004d5b40004d6120004d6b80004d7500004
d7bc0004d84c0004d8aa0004d9180004d9c00004da6c0004db020004db6c
0004dbee0004dc520004dcfe0004ddb60004de620004def00004df4c0004
dfb80004e00e0004e0900004e10e0004e1940004e2200004e27a0004e2e6
0004e3560004e3c60004e4360004e4ba0004e54a0004e5b00004e62a0004
e6a60004e71e0004e7c40004e8600004e8f00004e94e0004e9ec0004ea68
0004eafa0004eb9c0004ec460004ecde0004ed3a0004ed900004edf80004
ee9e0004ef460004f0100004f0b60004f1180004f1700004f1d00004f25e
0004f2e40004f3720004f3d20004f4360004f4a00004f5080004f5700004
f5ee0004f6760004f70a0004f7760004f7de0004f8420004f8ea0004f9a4
0004fa520004fae00004fb3e0004fbaa0004fc1a0004fcc00004fd6a0004
fe2c0004fece0004ff320004ffc200050034000500c400050142000501be
0005022a000502b80005031400050372000503f800050474000504dc0005
054000050594000506020005066a000506e80005075e000507d800050858
000508b40005091a0005097e00050a1e00050ac000050b7600050c260005
0c8200050cfa00050d5800050de200050e7a00050f0a00050f7000050fce
0005105c000510ce00051162000511fa0005126a000512da000513520005
13b0000514100005148a000514e4000515440005159e000515fa00051662
000516f0000517260005175e000517ea0005181400051856000518ea0005
19d800051a6800051a9e00051aee00051b6000051c0c00051c9e00051cf6
00051d5000051da800051e0200051e8600051f0c00051fb0000520580005
2096000521060005219a00052232000522c800052372000523a4000523f4
000524480005248e00052532000525bc00052642000526a2000526e60005
2734000527d40005286400052904000529aa00052a5000052b1400052b46
00052b7000052bf600052ca600052cd800052d0000052dce00052e2c0005
2ec600052f1400052f7a0005302200053090000530f600053182000531f4
0005326a0005331e00053378000533e80005342400053476000534fc0005
355c00053600000536e00005380800053998000539f400053a4a00053d70
00053e0a00053e6600053eae0005401c0005416e000541b4000542c20005
435a000544680005457200054614000546fc0005478e0005482a0005491c
00054a1c00054a9800054b1e00054b6600054c9600054dd200054eb60005
4f0600054f3a0005502800055150000552ea0005541a00055530000555f4
000557100005577e000558120005596400055a1a00055b8400055cb40005
5de600055f1200055fbe0005608400056156000562b00005643000056560
0005667c000568360005698800056a7400056b5000056c1200056d8c0005
6edc00056eec00056efc00056f0c00056fc40005707a000570b6000570ec
000571240005715a000572ee00057502000575ec000577020005787a0005
79e800057aa200057b6400057c4800057d4200057ee00005803400058222
000583e8000585c40005875c000588440005892000058a6800058bea0005
8cd200058dec00058e2e00058e7800058fd600059154000592c6000593be
0005959e0005975e000597e2000598120005985e00059926000599f60005
9b8a00059c1200059c7a00059ccc00059d1e00059ed00005a1000005a236
0005a4180005a4f40005a60e0005a7ba0005a9c60005aac80005abb40005
ada60005afae0005b11a0005b29e0005b3fe0005b56c0005b5fa0005b68a
0005b7a40005b8b00005ba580005bbb20005bda20005bf6c0005c0000005
c09c0005c1320005c1ba0005c2a00005c3780005c5120005c6a40005c832
0005c9560005c9660005c9960005c9c60005cb400005cce20005cd8c0005
ce6e0005cf2e0005cfd80005d0720005d1540005d2120005d2ee0005d4b8
0005d5f20005d67e0005d6ae0005d6de0005d7120005d7460005d7560005
d7660005d7960005d7c60005d7fa0005d82e0005d8620005d8960005d8ca
0005d8fe0005da780005da880005dab80005dae80005db200005db540005
db880005dbbc0005dbf00005dc240005dc580005dc900005dcc60005dcf6
0005dd360005dd6e0005ddb60005ddfc0005de300005de640005de9e0005
ded60005df760005df860005e0d80005e2a00005e4460005e5f00005e73c
0005e8520005e9600005ea760005eb700005ec580005ed7a0005ee760005
ef4e0005f03e0005f0fa0005f1ae0005f2760005f2f40005f3900005f3cc
0005f4300005f5380005f5760005f6240005f6900005f6cc0005f70a0005
f77c0005f8680005f8e80005f9680005f9a80005fa560005fa960005fb08
0005fba00005fbdc0005fc560005fcae0005fd680005fda40005fde20005
fee00005ff720005ffb4000600d2000601fc000603de000605a0000606d6
00060804000609040006092c000609540006098a000609bc000609e80006
0a1000060a3800060a6600060ac400060b3200060b6a00060ba200060bd2
00060bf800060c2c00060c6200060c8800060cae00060cdc00060d0a0006
0d3600060dac00060dd400060e3600060e5c00060e8200060ea800060ece
00060efe00060f2e00060f5e00060f9800060fc800060ffe0006102e0006
106000061086000610ac000610e00006111600061146000611760006119c
000611c2000611e8000612160006124a000612d0000613140006134e0006
1382000613c6000614000006143a000614600006148a000614d600061518
0006153e0006156c00061592000615b8000615f80006162a0006165a0006
168a000616b0000616d600061706000617360006175c00061782000617a8
000617ce000617f40006181a00061842000618ca000618f4000619680006
199000061a0600061a2e00061a9000061ac200061af400061b2400061b5c
00061b8e00061bbc00061bf600061c1e00061c7e00061cc000061cf00006
1d1c00061d4c00061d7c00061da400061dcc00061df400061e5600061e7e
00061edc00061f2000061f6400061f9400061fca00061ff0000620180006
203e000620660006208c000620b4000620dc000621060006212c00062152
00062178000621aa000621d20006225800062282000622ec0006231c0006
234c0006237200062398000623f0000624200006245c00062486000624b6
000624e60006251a0006254e0006257e000625be000625f8000626400006
26660006268c000626b2000626d8000626fe0006273e0006277e000627ba
000627ea0006281a0006284a0006287a000628b2000628ea0006292a0006
296a000629a4000629de00062a1a00062a5800062aa200062aec00062b32
00062b7800062bba00062bfc00062c2c00062c5c00062c9000062cc40006
2cfe00062d3800062d8400062dd000062e2800062e8000062ed800062f36
00062f6600062f9600062fcc000630020006303800063074000630a80006
30dc0006313000063184000631d80006322c00063280000632d40006332c
00063384000633b2000633e000063412000634440006348a000634d00006
35020006353400063586000635de0006362200063666000636aa000636ee
0006374200063796000637c6000637f60006382c00063862000638a00006
38e60006393a00063984000639d600063a2800063a8800063ae800063b18
00063b4a00063b8400063bbe00063c1000063c6400063cae00063cf60006
3d3800063da200063df000063e3c00063e6e00063ea000063ed400063f08
00063f3e00063f7400063fb200063fe80006401a00064056000640ac0006
410200064160000641be000642140006426a0006429e000642ce00064312
0006434800064378000643bc000643fa000644320006446a000644a00006
44dc0006450c0006454800064588000645ce0006461800064664000646b0
000647060006475c000647aa000647f80006484600064896000648f20006
494e000649a6000649fe00064a5200064aa600064ae800064b2a00064b72
00064bba00064c0200064c5000064c9400064cd800064d3e00064da40006
4e0a00064e7000064ed600064f3c00064fa60006501000065058000650a0
000650e8000651300006517c000651c80006521c00065268000652ac0006
52fa00065362000653ca0006543a000654aa000655120006557a000655ba
000655f8000656420006566c000656b2000656ea00065738000657680006
5798000657d4000658080006582e00065882000658c000065914000659fa
00065b2200065b6400065b8a00065be000065c1000065c5200065c9a0006
5ce800065d3200065d8200065da800065e9000065f74000660c6000660f4
00066122000661b60006623c0006626a000662f400066324000663540006
63a2000663f0000664d4000665b0000666f40006672400066754000667ea
00066872000668a2000668d20006690200066992000669c2000669f20006
6a4400066a8c00066ae200066b7800066c1000066c8400066cd600066d00
00066d5600066d8a00066dd400066e0c00066e5c00066e9a00066ee60006
6f0c00066f8800066fda000670ec000672f6000674aa0006762c0006779e
00067a4000067d1000067ed00006801600068270000683b2000685c80006
861a0006866a000686c000068716000687780006880000068a4e00068bf2
00068dfe00068f1a000690ce0006925000069310000693f20006945a0006
94bc000695320006959a00069646000696b6000697460006985a0006991e
0006996a00069a0000069aac00069b5000069bfa00069c4400069c860006
9cfc00069d6400069df400069ea200069f0c00069f7000069fd60006a090
0006a1260006a1840006a1ae0006a1d80006a1e80006a1f80006a2ba0006
a3be0006a5c80006a71e0006a72e0006a7de0006a8c20006a9220006a932
0006a98e0006a9ec0006ab0c0006abfa0006ac0a0006ac1a0006ac2a0006
ac3a0006ad200006ae200006aff80006b1b40006b2ba0006b3340006b3ae
0006b4600006b4700006b57e0006b58e0006b59e0006b6600006b7940006
b8800006b8900006b8a00006b8b00006ba160006bb820006bcae0006bcbe
0006bcce0006bcde0006bcee0006bdd00006bde00006bf420006c04c0006
c14a0006c2820006c3540006c3d20006c4500006c5700006c5ec0006c638
0006c6c40006c7d80006c82c0006c96e0006ca2e0006cafa0006cbf00006
ccfa0006cdac0006cf120006cf780006d03c0006d23e0006d3cc0006d54a
0006d67a0006d92c0006da6e0006db9c0006dd140006de8c0006e00c0006
e19a0006e34c0006e3ba0006e51e0006e6560006e75a0006e8900006e9c2
0006ea920006eb620006ecbe0006ed980006ee380006ef3c0006f0660006
f1640006f2e40006f44e0006f58c0006f7040006f8500006f9320006f99a
0006fa3c0006fadc0006fbda0006fd420006fe7c000700100007015a0007
023e000702a6000703ac0007044c0007050a000705b8000705f8000707a4
000708760007093c00070a6400070c0400070d1000070d6800070f000007
0f8e00070fa000070fd0000710000007103800071070000710a6000710e2
0007111800071154000712c20007130c000713a60007143e000714b80007
153c000715a20007164e0007169a0007174c000717b20007181e00071856
000718940007190800071a0200071b2000071c2200071c6400071ce20007
1d5000071d6000071d7000071d8000071d9000071da000071db000071dc0
00071dd000071de000071df000071e0000071e0000071f8400071f940007
206e000721340007226a00072460000726620007285e00072a9400072c94
00072d0000072e1200072fa4000730fc000731ae000731f2000732900007
33c000073410000734a6000735e2000735f2000737a8000738dc0007392c
00073982000739da00073a1c00073a5c00073ae200073b2200073c140007
3ca200073cd800073d5200073dca00073e1a00073f260007401c000740c6
000740f00007411a000741440007416e000741ae000741ee000742260007
425e000742a8000742f20007433200074372000743bc0007440600074446
00074486000744e00007453a00074574000745ae000745f2000746360007
467a000746be0007471200074766000747b2000747fe0007483c00074880
000748d0000749200007497a000749d800074a0200074a2c00074ac60007
4b6000074ba400074be800074cfe00074d0e00074d5600074d9e00074df0
00074e4200074eac00074f0000074f4c00074faa00075034000750980007
50dc000751260007518e000751d800075218000752600007529c000752d8
000753140007534e00075390000753d200075412000754520007549c0007
54e60007553c00075594000755e20007563000075672000756c000075702
0007574c0007578e000757d20007582e0007588a000758d6000759220007
596c000759b6000759f400075a3200075ab000075b2e00075b6800075ba2
00075c3c00075cd600075daa00075e7e00075eda00075f3600075faa0007
601e0007617c0007618c0007627600076286000762bc000762f20007632c
00076366000763a2000763de000764240007646a000765d0000767860007
68d200076a9000076c0600076dae00076ede00076fe40007720200077346
000774dc00077664000776e20007782600077a2e00077ac200077b560007
7caa00077dd400077f4e0007808e000781fa000782e8000784b200078646
000786c8000787fa000788e400078a4c00078b2e00078ce400078dd60007
8f3800079074000791680007932c000794b400079658000797bc00079958
00079b1600079c9c00079d3800079eac00079f9e0007a0860007a2060007
a3580007a4780007a6100007a7e60007a9740007aa1e0007aad40007ac86
0007ad2a0007adb80007ae040007ae500007aec80007afa60007b0200007
b0c20007b1160007b27a0007b3a60007b4b80007b5ba0007b6820007b7f6
0007b9360007bb5c0007bc060007bd300007be340007bfd40007c0c00007
c1ba0007c2b80007c39e0007c4b80007c6720007c8200007c98e0007ca06
0007ca7a0007cb980007cc1c0007cd1e0007ceaa0007d0220007d1580007
d2620007d3d80007d5800007d7720007d9600007db260007db9a0007dc4a
0007dd000007ddb00007de6e0007df680007e06c0007e1660007e2720007
e2fa0007e3880007e4100007e4a40007e5800007e6760007e75a0007e850
0007e8e40007e9a00007ea340007eaf20007ebe20007ecea0007ede80007
eefc0007f01e0007f1320007f2720007f3ac0007f4ce0007f5e20007f726
0007f87a0007fa8e0007fc400007fcf40007fe100007fee6000800180008
00f60008028a00080344000803e0000804d2000805ba000806a600080724
0008081e0008095c00080a8800080abc00080b0000080b1000080bb00008
0c5200080d4800080e3400080f0e00080fe600081144000812a400081342
000813d8000814160008145600081494000814d40008152e000815860008
15e000081644000816d0000818cc0008191c00081a4800081ace00081b4e
00081c2800081d0000081e0400081ff00008210800082178000822080008
22ca0008239c0008240800082486000825da00082620000826660008274a
00082786000827e4000828220008285400082898000828da0008290a0008
29e400082aac00082b9000082c0c00082c5a00082ce400082dba00082e32
00082eec00082f9e00082fe8000830bc0008316e000831c6000831d60008
31e6000831f600083206000833380008334a0008342c000834d2000835dc
000836e80008372c00083770000837a4000837d800083828000838780008
38ca0008391c0008396e000839c400083ad200083bfa00083d7a00083f18
000840d8000841ca000842dc0008442800084480000845640008460e0008
46600008477c000848ee0008497000084a5800084b6800084bde00084d12
00084e1c00084e2c00084e3e00084e4e00084e5e00084e6e00084e7e0008
4e8e00084e9e00084eae00084ebe000850000008511e000851ac000852a6
000853340008538c00085444000855b000085694000856dc000857660008
57d4000858d600085922000859ea00085af000085bf600085c4e00085cbc
00085ccc00085dcc00085eb200085f96000860200008609e000861000008
61e00008623e00086270000862d800086386000863ce000864c00008655e
00086634000866c80008684c0008690c00086a6e00086ab200086b680008
6c2400086dde00086ece00086f4c00086fe000087094000871b000087238
000873c8000874580008750c0008763e0008766e0008769e000876ce0008
76fe00087732000877640008778a000877ba000877ea0008781a0008784e
0008787c000878aa000878d80008790a0008793a0008796a0008799a0008
79ca000879fa00087a2e00087a5e00087a8e00087abe00087af200087b22
00087b5200087b8200087ba800087bd800087c0800087c3800087c680008
7c9800087ca800087cd800087d0800087d3800087d5e00087d8e00087dbe
00087dee00087e1400087e4400087e7400087f0e00087f3c00087f6a0008
7f9800087fbc00087fea00088010000880400008806600088094000880ba
000880e000088106000881360008815c0008818c00088260000882900008
82c0000882f4000883240008834a0008837a000883aa000883da00088400
00088430000884560008847c000884a2000884d200088540000885700008
85a0000885d000088604000886380008865e0008868e000886be000886ee
000887220008875200088786000887b6000887e600088816000888460008
888e000888be000888ee000888fe0008890e0008894c000889f200088a02
00088a1200088a2200088b1800088b2800088b3800088bc600088bd60008
8be600088c5c00088c6c00088cb600088cc600088d7600088d8600088d96
00088e8e00088e9e00088f600008906c0008909c000890cc000890fc0008
912a0008915a0008918a000891ba000891ec00089220000892540008931e
0008934e0008942600089436000894460008947800089488000895680008
9622000896b6000896e60008971600089776000897860008982000089830
00089840000898ee000898fe00089ab400089bca00089c7000089ca00008
9dc800089e4800089e5800089e6800089e7800089ec200089ed200089ee2
00089ef200089fa60008a0ae0008a0be0008a1280008a1a40008a2000008
a2720008a3040008a3b20008a4400008a5200008a6040008a6d00008a724
0008a7420008a75e0008a77a0008a7960008a7b40008a7d00008a7ee0008
a80a0008a82a0008a8480008a8660008a8840008a8a20008a8d20008a902
0008a9320008a9620008a9960008a9ca0008a9fa0008aa2a0008aa500008
aaa60008aab60008aae60008ab160008ab460008ab7a0008abaa0008abda
0008ac0a0008ac300008ac600008ac700008aca40008acd40008ad040008
ad2a0008ad5a0008ad8a0008adba0008adee0008ae1e0008ae4e0008ae7e
0008aeb20008aee60008af0c0008af3c0008af6c0008af9c0008afd00008
b0000008b0300008b0560008b0860008b0960008b0c60008b0fa0008b10a
0008b13e0008b16e0008b1920008b1be0008b1e40008b29a0008b2ca0008
b2fa0008b32a0008b35e0008b38e0008b3be0008b3e40008b4140008b43a
0008b46a0008b49a0008b4ca0008b4fa0008b52e0008b5620008b5920008
b5c20008b5e80008b64c0008b6720008b6a20008b6c60008b6f20008b718
0008b7280008b74c0008b7700008b79c0008b80e0008b83e0008b86e0008
b8a20008b8d20008ba6e0008ba8c0008baa80008bac40008bae40008bd38
0008be760008bfac0008c1820008c2800008c3b40008c40a0008c48e0008
c54c0008c6240008c6d20008c7600008c8260008c8a00008c9360008c9dc
0008caa00008cb620008cc020008cce00008cda20008ce0a0008cf6c0008
cf9e0008d05c0008d1380008d1d60008d2900008d3480008d3800008d3b8
0008d3fa0008d43c0008d49c0008d50e0008d57a0008d5e60008d6340008
d6820008d6d40008d7260008d7740008d7c20008d7f20008d8220008d852
0008d8820008d8b00008d8dc0008d9080008d9360008d9620008d98e0008
d9bc0008d9ea0008da160008da420008da6e0008da9a0008dace0008db1e
0008db820008dbe60008dc140008dc420008dc6e0008dc9a0008dcc60008
dcf40008dd200008dd4e0008dd7a0008dda60008dde40008de220008de54
0008de860008deb80008deea0008df1c0008df4e0008df800008dfb20008
dfe80008e01e0008e05a0008e0960008e0c40008e0f20008e11e0008e14a
0008e3120008e9d20008f1720008f4d40008f7940008f8a80008f95a0008
f9a40008fa6c0008fab40008fb080008fb4a0008fb7c0008fbae0008fbea
0008fc260008fc620008fc9e0008fce00008fd220008fd640008fda40008
fdd00008fdfc0008fe280008fe540008fe8a0008fec00008fef60008ff2c
0008ff600008ff940008ffc80008fffc0009000e00090054000900c80009
0126000901bc000901cc000902720009034c00090444000905b400090664
000908ee000909e000090ad000090ba400090c9e00090daa00090f000009
0ff6000910e8000911d4000912c40009139a00091476000914d00009152a
000915b00009163c000916ee00091780000918f00009193c000919ac0009
1abe00091be600091ccc00091dc400091e8400091f380009200800092148
000921cc000922de00092344000923a8000923fc00092568000926080009
262c000929c000092dc2000930fc000932de0009344e000934660009347e
00093496000934ae000934c6000934d8000934f000093502000935680009
35780009358a000935a2000935b4000935cc000935dc000935f200093604
0009361c0009362e00093646000936580009366a0009367c0009368e0009
36a0000936da000936ec000936fe0009370e000937200009380e00093946
0009395600093ad600093ae600093c6c00093c7c00093c9400093cac0009
3cc400093cdc00093cf400093d0c00093eec00093efc00093f12000940b6
000940c6000941de000941f60009420e000942260009423e000942560009
426e000942860009429e000942b6000942ce000942e6000942fe0009431e
0009433e0009435c0009437a00094392000943b2000943c8000943de0009
450c0009451c00094606000946160009462e000946460009465e00094676
0009468e000946a6000946be000946d6000946ee000947060009471e0009
473600094844000948540009486c00094884000949d2000949e200094a6c
00094b4e00094b6000094c6c00094e1000094e2200094e4a00094e900009
4f2400094f3600094f4800094f5a00094f7400094f8e00094fa800094fba
000950aa000950c4000950de000951280009517200095184000951960009
51ac000951cc000951e4000951fe000953ae00095514000955240009553c
000955540009556c0009558400095594000955ae00095614000956b40009
57820009584a000958620009587a00095892000958aa000959a6000959be
000959d600095ada00095b4200095b9e00095bd200095c3e00095cf80001
0000100502b5003c00ca000700020010002f0059000004bf05ec00050002
0000003a02be0000000300000000021a00000000000300000001000a021a
0000000300000002000e0224000000030000000300440232000000030000
0004000a021a0000000300000005001802760000000300000006000e028e
00000003000000070064029c00000003000000080030000e000000030000
0009008a0300000000030000000d0d26038a0001000000000000010d10b0
0001000000000001000511bd0001000000000002000711c2000100000000
0003002211c90001000000000004000511bd0001000000000005000c11eb
0001000000000006000711f70001000000000007003111fe000100000000
0008001810b700010000000000090045122f000100000000000d06931274
0003000104030002000c1907000300010405000200101913000300010406
0002000c192300030001040700020010192f00030001040800020010193f
0003000104090000021e194f0003000104090001000a021a000300010409
0002000e02240003000104090003004402320003000104090004000a021a
0003000104090005001802760003000104090006000e028e000300010409
000700621b6d00030001040900080030000e0003000104090009008a0300
000300010409000d0d26038a00030001040a0002000c190700030001040b
000200101bcf00030001040c0002000c190700030001040e0002000c1bdf
0003000104100002000e1beb000300010413000200121bf9000300010414
0002000c1907000300010415000200101c0b0003000104160002000c1907
0003000104190002000e1c1b00030001041b000200101c2900030001041d
0002000c190700030001041f0002000c19070003000104240002000e1c39
00030001042a0002000e1c4700030001042d0002000e1c5500030001080a
0002000c19070003000108160002000c1907000300010c0a0002000c1907
000300010c0c0002000c190700a900200032003000310034002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0020
000d000d0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e0041007200690061006c0052006500670075006c
00610072004d006f006e006f0074007900700065003a0041007200690061
006c00200052006500670075006c0061007200200028004d006900630072
006f0073006f00660074002900560065007200730069006f006e00200036
002e003800370041007200690061006c004d00540041007200690061006c
002000200069007300200061002000740072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e002e
004d006f006e006f00740079007000650020005400790070006500200044
0072006100770069006e00670020004f006600660069006300650020002d
00200052006f00620069006e0020004e006900630068006f006c00610073
002c0020005000610074007200690063006900610020005300610075006e
0064006500720073002000310039003800320059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e002000200059
006f00750020006d006100790020006f006e006c00790020002800690029
00200065006d0062006500640020007400680069007300200066006f006e
007400200069006e00200063006f006e00740065006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
0068006500200065006d00620065006400640069006e0067002000720065
0073007400720069006300740069006f006e007300200069006e0063006c
007500640065006400200069006e0020007400680069007300200066006f
006e0074003b00200061006e006400200028006900690029002000740065
006d0070006f0072006100720069006c007900200064006f0077006e006c
006f006100640020007400680069007300200066006f006e007400200074
006f002000610020007000720069006e0074006500720020006f00720020
006f00740068006500720020006f00750074007000750074002000640065
007600690063006500200074006f002000680065006c0070002000700072
0069006e007400200063006f006e00740065006e0074002e000d000a000d
000a00540068006500200066006f006c006c006f00770069006e00670020
006c006900630065006e00730065002c0020006200610073006500640020
006f006e00200074006800650020004d004900540020006c006900630065
006e00730065002000280068007400740070003a002f002f0065006e002e
00770069006b006900700065006400690061002e006f00720067002f0077
0069006b0069002f004d00490054005f004c006900630065006e00730065
0029002c0020006100700070006c00690065007300200074006f00200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
201c004c00610079006f007500740020004c006f006700690063201d0020
006100730020006a006f0069006e0074006c007900200064006500760065
006c006f007000650064002000620079002000520061006c007000680020
00480061006e0063006f0063006b00200061006e00640020004a006f0068
006e00200048007500640073006f006e002e0020000d000a000d000a0050
00650072006d0069007300730069006f006e002000690073002000680065
00720065006200790020006700720061006e007400650064002c00200066
0072006500650020006f00660020006300680061007200670065002c0020
0074006f00200061006e007900200070006500720073006f006e0020006f
0062007400610069006e0069006e00670020006100200063006f00700079
0020006f006600200074006800650020004f00700065006e005400790070
00650020004c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
006200720065007700200061006e00640020006100730073006f00630069
006100740065006400200064006f00630075006d0065006e007400610074
0069006f006e002000660069006c00650073002000280074006800650020
201c004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065201d0029002c00200074006f00200064
00650061006c00200069006e00200074006800650020004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
0072006500200077006900740068006f0075007400200072006500730074
00720069006300740069006f006e002c00200069006e0063006c00750064
0069006e006700200077006900740068006f007500740020006c0069006d
00690074006100740069006f006e00200074006800650020007200690067
00680074007300200074006f0020007500730065002c00200063006f0070
0079002c0020006d006f0064006900660079002c0020006d006500720067
0065002c0020007000750062006c006900730068002c0020006400690073
0074007200690062007500740065002c0020007300750062006c00690063
0065006e00730065002c00200061006e0064002f006f0072002000730065
006c006c00200063006f00700069006500730020006f0066002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f006600740077006100720065002c00200061006e006400200074
006f0020007000650072006d0069007400200070006500720073006f006e
007300200074006f002000770068006f006d00200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
007400770061007200650020006900730020006600750072006e00690073
00680065006400200074006f00200064006f00200073006f002c00200073
00750062006a00650063007400200074006f002000740068006500200066
006f006c006c006f00770069006e006700200063006f006e006400690074
0069006f006e0073003a000d000a000d000a005400680065002000610062
006f0076006500200063006f00700079007200690067006800740020006e
006f007400690063006500200061006e0064002000740068006900730020
007000650072006d0069007300730069006f006e0020006e006f00740069
006300650020007300680061006c006c00200062006500200069006e0063
006c007500640065006400200069006e00200061006c006c00200063006f
00700069006500730020006f00720020007300750062007300740061006e
007400690061006c00200070006f007200740069006f006e00730020006f
006600200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002e000d000a
000d000a00540048004500200053004f0046005400570041005200450020
00490053002000500052004f005600490044004500440020002700410053
0020004900530027002c00200057004900540048004f0055005400200057
0041005200520041004e005400590020004f004600200041004e00590020
004b0049004e0044002c002000450058005000520045005300530020004f
005200200049004d0050004c004900450044002c00200049004e0043004c
005500440049004e004700200042005500540020004e004f00540020004c
0049004d004900540045004400200054004f002000540048004500200057
0041005200520041004e00540049004500530020004f00460020004d0045
0052004300480041004e0054004100420049004c004900540059002c0020
004600490054004e00450053005300200046004f00520020004100200050
004100520054004900430055004c0041005200200050005500520050004f
0053004500200041004e00440020004e004f004e0049004e004600520049
004e00470045004d0045004e0054002e00200049004e0020004e004f0020
004500560045004e00540020005300480041004c004c0020005400480045
00200041005500540048004f005200530020004f005200200043004f0050
00590052004900470048005400200048004f004c00440045005200530020
004200450020004c004900410042004c004500200046004f005200200041
004e005900200043004c00410049004d002c002000440041004d00410047
004500530020004f00520020004f00540048004500520020004c00490041
00420049004c004900540059002c00200057004800450054004800450052
00200049004e00200041004e00200041004300540049004f004e0020004f
004600200043004f004e00540052004100430054002c00200054004f0052
00540020004f00520020004f00540048004500520057004900530045002c
002000410052004900530049004e0047002000460052004f004d002c0020
004f005500540020004f00460020004f005200200049004e00200043004f
004e004e0045004300540049004f004e0020005700490054004800200054
0048004500200053004f0046005400570041005200450020004f00520020
00540048004500200055005300450020004f00520020004f005400480045
00520020004400450041004c0049004e0047005300200049004e00200054
0048004500200053004f004600540057004100520045002ea92032303134
20546865204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c
205269676874732052657365727665642e200d0d486562726577204f7065
6e54797065204c61796f7574206c6f67696320636f7079726967687420a9
2032303033202620323030372c2052616c70682048616e636f636b202620
4a6f686e20487564736f6e2e2054686973206c61796f7574206c6f676963
20666f72204269626c6963616c20486562726577206973206f70656e2073
6f7572636520736f66747761726520756e64657220746865204d4954204c
6963656e73653b2073656520656d626564646564206c6963656e73652064
65736372697074696f6e20666f722064657461696c732e417269616c5265
67756c61724d6f6e6f747970653a417269616c20526567756c617220284d
6963726f736f66742956657273696f6e20362e3837417269616c4d544172
69616c20697320612074726164656d61726b206f6620546865204d6f6e6f
7479706520436f72706f726174696f6e2e4d6f6e6f747970652054797065
2044726177696e67204f6666696365202d20526f62696e204e6963686f6c
61732c205061747269636961205361756e646572732031393832596f7520
6d617920757365207468697320666f6e74206173207065726d6974746564
206279207468652045554c4120666f72207468652070726f647563742069
6e207768696368207468697320666f6e7420697320696e636c7564656420
746f20646973706c617920616e64207072696e7420636f6e74656e742e20
20596f75206d6179206f6e6c792028692920656d62656420746869732066
6f6e7420696e20636f6e74656e74206173207065726d6974746564206279
2074686520656d62656464696e67207265737472696374696f6e7320696e
636c7564656420696e207468697320666f6e743b20616e64202869692920
74656d706f726172696c7920646f776e6c6f6164207468697320666f6e74
20746f2061207072696e746572206f72206f74686572206f757470757420
64657669636520746f2068656c70207072696e7420636f6e74656e742e0d
0a0d0a54686520666f6c6c6f77696e67206c6963656e73652c2062617365
64206f6e20746865204d4954206c6963656e73652028687474703a2f2f65
6e2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e
7365292c206170706c69657320746f20746865204f70656e54797065204c
61796f7574206c6f67696320666f72204269626c6963616c204865627265
7720d24c61796f7574204c6f676963d3206173206a6f696e746c79206465
76656c6f7065642062792052616c70682048616e636f636b20616e64204a
6f686e20487564736f6e2e200d0a0d0a5065726d697373696f6e20697320
686572656279206772616e7465642c2066726565206f6620636861726765
2c20746f20616e7920706572736f6e206f627461696e696e67206120636f
7079206f6620746865204f70656e54797065204c61796f7574206c6f6769
6320666f72204269626c6963616c2048656272657720616e64206173736f
63696174656420646f63756d656e746174696f6e2066696c657320287468
6520d24c61796f7574204c6f67696320536f667477617265d3292c20746f
206465616c20696e20746865204c61796f7574204c6f67696320536f6674
7761726520776974686f7574207265737472696374696f6e2c20696e636c
7564696e6720776974686f7574206c696d69746174696f6e207468652072
696768747320746f207573652c20636f70792c206d6f646966792c206d65
7267652c207075626c6973682c20646973747269627574652c207375626c
6963656e73652c20616e642f6f722073656c6c20636f70696573206f6620
746865204c61796f7574204c6f67696320536f6674776172652c20616e64
20746f207065726d697420706572736f6e7320746f2077686f6d20746865
204c61796f7574204c6f67696320536f667477617265206973206675726e
697368656420746f20646f20736f2c207375626a65637420746f20746865
20666f6c6c6f77696e6720636f6e646974696f6e733a0d0a0d0a54686520
61626f766520636f70797269676874206e6f7469636520616e6420746869
73207065726d697373696f6e206e6f74696365207368616c6c2062652069
6e636c7564656420696e20616c6c20636f70696573206f72207375627374
616e7469616c20706f7274696f6e73206f6620746865204c61796f757420
4c6f67696320536f6674776172652e0d0a0d0a54484520534f4654574152
452049532050524f564944454420274153204953272c20574954484f5554
2057415252414e5459204f4620414e59204b494e442c2045585052455353
204f5220494d504c4945442c20494e434c5544494e4720425554204e4f54
204c494d4954454420544f205448452057415252414e54494553204f4620
4d45524348414e544142494c4954592c204649544e45535320464f522041
20504152544943554c415220505552504f534520414e44204e4f4e494e46
52494e47454d454e542e20494e204e4f204556454e54205348414c4c2054
484520415554484f5253204f5220434f5059524947485420484f4c444552
53204245204c4941424c4520464f5220414e5920434c41494d2c2044414d
41474553204f52204f54484552204c494142494c4954592c205748455448
455220494e20414e20414354494f4e204f4620434f4e54524143542c2054
4f5254204f52204f54484552574953452c2041524953494e472046524f4d
2c204f5554204f46204f5220494e20434f4e4e454354494f4e2057495448
2054484520534f465457415245204f522054484520555345204f52204f54
484552204445414c494e475320494e2054484520534f4654574152452e00
4e006f0072006d0061006c006f00620079010d0065006a006e00e9006e00
6f0072006d0061006c005300740061006e0064006100720064039a03b103
bd03bf03bd03b903ba03ac00a90020003200300031003400200054006800
650020004d006f006e006f007400790070006500200043006f0072007000
6f0072006100740069006f006e002e00200041006c006c00200052006900
67006800740073002000520065007300650072007600650064002e002000
0d000a000d000a0048006500620072006500770020004f00700065006e00
540079007000650020004c00610079006f007500740020006c006f006700
69006300200063006f0070007900720069006700680074002000a9002000
320030003000330020002600200032003000300037002c00200052006100
6c00700068002000480061006e0063006f0063006b002000260020004a00
6f0068006e00200048007500640073006f006e002e002000540068006900
730020006c00610079006f007500740020006c006f006700690063002000
66006f00720020004200690062006c006900630061006c00200048006500
620072006500770020006900730020006f00700065006e00200073006f00
7500720063006500200073006f0066007400770061007200650020007500
6e00640065007200200074006800650020004d004900540020004c006900
630065006e00730065003b002000730065006500200065006d0062006500
640064006500640020006c006900630065006e0073006500200064006500
73006300720069007000740069006f006e00200066006f00720020006400
65007400610069006c0073002e0041007200690061006c00200069007300
200061002000740072006100640065006d00610072006b0020006f006600
200054006800650020004d006f006e006f00740079007000650020004300
6f00720070006f0072006100740069006f006e002e004e006f0072006d00
610061006c0069004e006f0072006d00e1006c004e006f0072006d006100
6c0065005300740061006e00640061006100720064004e006f0072006d00
61006c006e0079041e0431044b0447043d044b0439004e006f0072006d00
e1006c006e0065004e0061007600610064006e006f0074006801b001a103
00006e00670041007200720075006e00740061000000410c0054032c032c
032c0222001d001f032b032a003c001f032ab2061d1fb80328b326181fd0
bc032900e0032900020329b22b1d1fb90327031db23b1f40b80323b31215
320f412d03200001002f0320000100200320006f032000af032000bf0320
0004005f031e00010010031e007f031e0080031e00af031e00bf031e00d0
031e00060000031e0010031e0020031e006f031e009f031e00e0031e0006
031d031cb2201f1041270319007f03190002000f031700ef031700ff0317
0003001f0317002f0317004f0317005f0317008f0317009f03170006000f
0317005f0317006f0317007f031700bf031700f00317000600400317b292
3340b80317b28b3340b80317b36a6c3240b80317b2613340b80317b35c5d
3240b80317b357593240b80317b34d513240b80317b344493240b80317b2
3a3340b80317b331343240b80317b32e423240b80317b3272c3240b80317
b312253280b80317b30a0d32c04116031600d00316000200700316000102
c4000f0101001f00a0031500b0031500020306000f0101001f00400312b3
2426329fbf03040001030203010064001fffc00301b20d1132410a02ff02
ef0012001f02ee02ed0064001fffc002edb30e11329f414a02e200af02e2
00bf02e2000302e202e202e102e1007f02e00001001002e0003f02e0009f
02e000bf02e000cf02e000ef02e0000602e002e002df02df02de02de000f
02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd
02dd001002dc0001000002dc0001001002dc003f02dc000202dc02dc0010
02db000102db02db000f02da000102da02daffc002d3b2373932b9ffc002
d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc002d3b212
1632b802d2b2f9291fb90326031cb23b1f40bb0322003e00330322b22531
1fb80318b23c691fb802e3b3202b1fa0413002d400b002d40002000002d4
001002d4002002d4005002d4006002d4007002d40006006002d6007002d6
008002d6009002d600a002d600b002d60006000002d6001002d6002002ca
002002cc002002d6003002d6004002d6005002d6000802d0b2202b1fb802
cfb226421f411602ce02c70017001f02cd02c80017001f02cc02c6001700
1f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f00410b02c600
0002c7001002c6001002c7002f02c5000502c1b324121fff411102bf0001
001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf000602bf0222
b2641f12410b02bb00ca0800001f02b200e90800001f02a600a20800406a
1f4026434932402043493240263a3d3240203a3d329f209f260240269699
32402096993240268e923240208e92324026848c324020848c3240267a81
3240207a813240266c763240206c76324026646a324020646a3240265a5f
3240205a5f3240264f543240204f5432b8029eb724271f374f6b0120410f
0277003002770040027700500277000402770277027700f90400001f029b
b22a2a1fb8029a402b292a1f80ba0180bc0180520180a201806501807e01
808101803c01805e01802b01801c01801e0180400180bb01380001008001
40b40180400180bb013800010080013940180180ca0180ad018073018026
018025018024018020013740b80221b2493340b80221b2453340b80221b3
41423240b80221b33d3e320f410f0221003f0221007f0221000300bf0221
00cf022100ff0221000300400221b320223240b80221b3191e3240b80222
b32a3f3240b80221b32e3a326f414a02c3007f02c3008f02c300df02c300
04002f02c3006002c300cf02c30003000f02c3003f02c3005f02c300c002
c300ef02c300ff02c3000600df02220001008f02220001000f0222002f02
22003f0222005f0222007f022200ef0222000600bf022100ef0221000200
6f0221007f022100af02210003000f0221002f0221003f0221004f022100
0402c302c30222022202210221401d101c102b1048038f1c010f1e014f1e
ff1e023700161600000012110811b8010db6f70df8f70d00094109028e02
8f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f41150197
001e0401001f013900260125001f013800730401001f0135001c0801001f
0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e0401b61f
f91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51cb802abb61fd4
1c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c381fadca
b80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f
6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c621f4073b8
0801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb804
01b61f2a1c561f291cb80101b21f231eb80401b21f5537b80168402c0796
0758074f07360732072c0721071f071d071b071408120810080e080c080a
080808060804080208000814b8ffe0402b00000100140610000001000604
000001000410000001001002000001000200000001000002010802004a00
b013034b024b5342014bb0c063004b6220b0f65323b8010a515ab0052342
01b0124b004b5442b0382b4bb807ff52b0372b4bb007505b58b101018e59
b0382bb00288b801005458b801ffb101018e851bb0124358b90001011185
8d1bb900010128858d5959001816763f183f123e113946443e113946443e
113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b
2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b53
58b0ff1d594bb09353205c58b901f201f04544b901f101f045445958b903
3e01f2455258b901f2033e4459594bb8015653205c58b9002001f14544b9
002601f145445958b9081e0020455258b90020081e4459594bb8019a5320
5c58b9002501f24544b9002401f245445958b909090025455258b9002509
094459594bb8040153205c58b173244544b1242445445958b91720007345
5258b9007317204459594bb8040153205c58b1ca254544b1252545445958
b9168000ca455258b900ca16804459594bb03e53205c58b11c1c4544b11e
1c45445958b9011a001c455258b9001c011a4459594bb05653205c58b11c
1c4544b12f1c45445958b90189001c455258b9001c01894459594bb80301
53205c58b11c1c4544b11c1c45445958b90de0001c455258b9001c0de044
59592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45652345602345
6560234560b08b766818b080622020b163594565234520b0032660626368
20b003266165b059236544b063234420b13b5c4565234520b00326606263
6820b003266165b05c236544b03b2344b1005c455458b15c406544b23b40
3b4523614459b347503437456523456023456560234560b089766818b080
622020b134504565234520b003266062636820b003266165b050236544b0
34234420b147374565234520b003266062636820b003266165b037236544
b0472344b10037455458b137406544b24740474523614459004b5342014b
5058b108004259435c58b108004259b3020b0a124358601b215942161070
3eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b012
4358b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9
187e3b211bba01a80400000b2b59b0102342b0112342002b747573750018
4569444569444569447373737374757374752b2b2b2b74752b2b2b2b2b73
7373737373737373737373737373737373737373737373732b2b2b45b040
6144737400004bb02a534bb03f515a58b1070745b040604459004bb03a53
4bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b10303
45b040604459004bb02e534bb03c515a58b1090945b8ffc06044592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002
bbb301401e017400735903b01e4b5402b0124b545ab012435c5a58ba009f
02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373732b2b2b
2b2b002b2b2b2b2b2b004569447345694473456944737475456944734569
444569444569447374456944456944732b2b2b2b2b732b002b732b74752b
2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b7374757374752b2b2b742b00
2b2b2b00184569442b0000>
[16361 15965 16021 16121 16017 15741 16293 16081 16265 15853 15989 16249 16333
16305 16321 15593 16297 16373 16205 16097 16341 16353 16249 16025 15737 16089
15433 15893 16265 15529 15645 15401 16213 16241 15889 16101 16305 19473 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3308 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>ArialMT AddT42Char 
2 4060 20 <000100df000002fb05c0000a00ecb30a0c0c0cb80140b456000c0c0cb801
40b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db80140b456
00080d0db8014040215603400d11346b047f028f02990804ac0401090006
0502030905010c0201ca0a00b8ffc0400a21233430000120000100b8ffe0
b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d025500b8ff
f040190f0f065500100c0c065500100d0d0655001a0c05400d0f3405b8ff
c0400e212334300501200540050205190bba013c018500182b4e10e45d71
2b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f17390111393130015d
005d2b012b2b2b2b2b2b212311060607353636373302fbb441d35497e22f
74047b3e7c1fae47ca5f>ArialMT AddT42Char 
2 4340 21 <0001003c0000040705c0001e01f7b10602435458400911100d1813130655
0db8fff4b4111106550db8ffee4009101006550d1e14051eb8ffe8401713
1306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb400c020a17
17201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b2b3fed2b
2b2bc43231301bb10202435458400911100d0c121202550db8fff440090f
1102550d1e14051eb8ffe0400b121302551e140f1102551eb802bbb2020a
17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f10110202201f11
12392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b40473b05
3b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a138912bc
12e51ae51bf01a0cbf0bb713021e0a10080606ca1c1a141c1c1a081c1a03
0102081a1c030d1e10b802a4b34f110111b80118b50d1e1405001eb802bb
b301020c0a4110fff4000c000c01400056000afff2000b000b0140005600
0afff8000d000d0140400d560a7317d30000014021233401bb0281002000
100138400c11b53f025f026f027f020402ba0224001f018fb18b182b10f6
5df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de411121739011112
1739870e2e2b0e7d10c4011112393130b00243b040505840091b101c101d
101e1006befff00007ffe00008fff00009fff00038383838013838383859
005d015d7259592515212637363637363635342623220607273636333216
15140606070606070407fc37021725a39aefa8997b829c01b913f8d1d3f6
48a7c2a25c1eadad413c63c07ec4e5666b939c8a13cfd9eaad58aabca488
6131>ArialMT AddT42Char 
2 10254 36 <0002fffd0000055905ba0007000e0263411d0001fff8000c000c01400056
000afffc000c000c014000560009fff8000c000c014000560005fff8000c
000c014000560004fff8000c000c0140b45608080c0cb80140b45606040c
0cb80140b45607080c0cbe014000560005fffa000b000b0140b45608060b
0bbe014000560004fff4000b000b0140b456020c0b0bbe014000560001ff
f4000b000b0140b456060a0b0bb80140b45607160b0bb80140b456000c0b
0bb80140b4560b060c0cb80140b4560a0a0c0cb80140b456050a0c0cb801
40b456090e0c0cb80140b456060a0c0cb80140b456070e0c0cb80140b756
010e0f10025502b8fff2b40f10025502b8fff8b40d0d065502b8fff44059
0c0c0655090c0c0c0655050c0c0c06552f10301067086809601088039010
c905c606c010f0100b0805590156025010680bb010f30cf30df30e09040c
040d040e030b0a090504040c0d0e080607070c09050408060c07010000b8
fff8400f0c0c02550020070c1407070c020303b8fff840150c0c02550320
040c1404040c091e0505081e060306b80270400900080ce94002010202ba
010b0001010b40120c2000650703525004cf04df040390040104b8010140
0b500cc007df0c03900c010cb8010140100f07cf07027f0780070207930f
d6d7182b10f45d7119f45d71f45d7118ed10ed1a1910eded00183f3c1aed
3fe43c10ed3c10ed87052e2b2b7d10c4872e182b2b7d10c4011112393911
39398710c4c40ec4c4870510c4c40ec4c43130014bb00b534bb01e515ab0
0243b040505a58b4040f030807bafff00000fff838383838590172715d2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b230133
012303210313210326270607030233d10258ddabfd9ba1d901f19946221c
3305bafa4601bcfe44025a0196b9778d8b00>ArialMT AddT42Char 
2 10932 37 <00030096000004e905ba0011001d002a01adb90004fff440290b0b065504
044623562366237309840906691a75057009730b8305830b062716090318
272a1e161d094110ffe8000c000c014000560009ffe8000b000b01400056
0009ffe8000d000d0140401856090913121e2a2a2929001c1d1e0201021f
1e1e110008184110fffe000c000c014000560018fff2000b000b01400056
0018fff6000c000d0140400a561826060c1010025506b8ffe640250f0f02
5506120d0d025506060c0c025506080b0b0655060c0c0c065506140d0d06
550654254110fffe000c000c014000560025fff2000b000b014000560025
fff6000c000d014040105625260c1c101002550c0a0d0d02550cb8fff440
0c0b0b06550c1a2c1d1e020c0cb80140b4561e0e0b0bb80140b4561e0a0c
0db80140400e561e200120000100201010025500b8fff6b40f0f025500b8
fff6b40d0d025500b8fffab40c0c025500b8fffab40c0c065500b8fff040
0a0d0d0655005d2b3b5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c4e10f6
2b2b2b4ded2b2b2bf42b2b2b2b2b2b2bed2b2b2b003f3cfd3c3f3cfd3c12
392f3c10fd3c392f2b2b2b1139111239011217393130015d005d2b331121
32161615140607161615140e022301213237363635342626232111213237
3e02353426262321960226a8cb736667858f5780c18cfe93013d81384a4b
46829efedb016d5e26435a3a54958cfead05ba59b9655ea63327bc8067b1
603103521116664d496f29fba0070c386b4652793100>ArialMT AddT42Char 
2 11494 38 <00010066ffe7057605d3001d00fdb563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc040202839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f17020c0cb80140b45617
0e0b0bb80140b456170a0c0db80140400a561726200801080c0c0db80140
400d56080c0b0b065508191e635c182b4e10f42b2b5d4ded2b2b2b4e10f6
5d4dedf4ed003fed3fed1117393130012b2b5d5d71005d2b2b0172011706
04232224023534122433320417072626232206021514121633323604b4c2
3dfec3e5edfed79baf0143c2dc012c3bbf33c293a9e35c6de686a3e20202
31effbc1016ed2e50155b1e0cb2da092a2feef91bbfee98abc00>ArialMT AddT42Char 
2 12486 41 <000100a80000048505ba000900ac402206051e08088f070107070003041e
0201020008079c2002200b02021a0b0409020c0cb80140b456090e0b0bb8
0140b456090a0c0db80140400e5609200120000100201010025500b8fff6
b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b0655
00b8fffeb40c0c065500b8fff0400a0d0d0655005d0a3b5c182b4e10f42b
2b2b2b2b2b2b5d3c4dfd2b2b2b3c4e10f65d4de4003f3f3cfd3c12392f5d
3c10fd3c313033112115211121152111a803ddfce502b0fd5005baadfe3a
adfd6600>ArialMT AddT42Char 
2 12700 42 <0001006dffe705b905d300250166401a1b141b15026027015e0813011203
2424002112170225001e0201b8ffc040150c0c0655010106171e0e03211e
06090101262725244110fffe000c000c014000560024fff2000b000b0140
00560024fff6000c000d0140400d56242003032002202760020302b8ffe4
b40f0f025502b8fff2b40d0d025502b8ffdab40c0c025502b8fff4400e0c
0c06550272802701271d020c0cb80140b4561d0e0b0bb80140b4561d0a0c
0db80140400a561d26200a010a0c0c0db80140400d560a100c0c06550a19
26635b182b4e10f42b2b5d4ded2b2b2b4d105df62b2b2b2b5d3c4d10fd2b
2b2b3c1112392f003fed3fed12392f2b3cfd3c1112391112390111123912
3931304379404404231b1c1a1c191c03060c26102515261f260825042623
25180d1d2100160f1321011112141320071d210022052521011c0b172101
14111721011e092121002403212100002b2b2b2b012b2b103c103c2b2b2b
2b2b2b2b2b2b2a81015d005d013525110604232224023534122433320416
17072e02232206060706151412043332363711034c026d8ffed0a0d8fe9f
b4b30150db9f01019226af2162b66f85c2772138870102917ef03e023fac
01fde07273b9015ed8d60173b467b8943070804d51844f889fc4fef88061
37011100>ArialMT AddT42Char 
2 13184 43 <000100a40000052205ba000b011eb9000dffc0401613153404031e090aa0
0ad00a020a0502020b080805084110fffe000c000c014000560008fff200
0b000b014000560008fff6000c000d0140b5560820070706b8ffeeb40f0f
025506b8fff2400b0d0d025506100c0c025506b8ffe040150b0b06550601
0c0c0655065d800d010d020b020c0cb80140b4560b0e0b0bb80140b4560b
0a0c0db80140b7560b200120000100b8ffc0400a13153400201010025500
b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c025500080b
0b065500b8fff7b40c0c065500b8fff840160d0d0655005d0c200d01200d
500d600d700d043b59182b5d7110f62b2b2b2b2b2b2b2b5d3cfd2b2b2b3c
105df62b2b2b2b2b3c10fd2b2b2b3c003f3c3f3c395d2f3cfd3c3130012b
331133112111331123112111a4c202fac2c2fd0605bafda6025afa4602b3
fd4d>ArialMT AddT42Char 
2 13516 44 <000100bf0000018105ba0003013fb302020c0cb80140b45603020c0cb801
40b45602070b0bb80140b45603070b0b410d014000560001fff9000b000b
014000560000fff9000b000b0140b45602050c0db80140b45603050c0d41
0d014000560001fffb000c000d014000560000fffb000c000d0140b65601
0200080205b8ffc0b3383d3405b8ffc0b333343405b8ffc0b32d303405b8
ffc0b328293405b8ffc0b323253405b8ffc0b31d1e3405b8ffc0b3181a34
05b8ffc0402a0d103420059005af050303200100008f00a000b000042f00
40005000df00f000051220008f0090000305b8ffc0400b0d0d0255001810
10025500b8ffecb40f0f025500b8ffeeb40d0d025500b8fff640100c0c02
5500200b0b065500a204d659182b10f62b2b2b2b2b2b5d435c58b2800001
015d5971723cfd5d2b2b2b2b2b2b2b2b3c003f3f3130012b2b2b2b2b2b2b
2b2b2b33113311bfc205bafa4600>ArialMT AddT42Char 
2 14780 47 <000100960000042a05ba0005008b400c010204031e05000820040104b802
a7b5070203020c0cb80140b456030e0b0bb80140b456030a0c0db8014040
0e5603200120000100201010025500b8fff6b40f0f025500b8fff6b40d0d
025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a0d0d0655
005d063b5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c10e65d003f3cfd3c
3f313033113311211596c202d205bafaf3ad>ArialMT AddT42Char 
2 14948 48 <000100980000060f05ba0010032fb3082a0b0db80140b456022a0b0db901
400056b10202435458b90008fff6400b0c0c0255080e0d11025502b8ffee
b40d11025505b8ffee40280d1102550c120c0c0255050f0c030900010208
090b0e000809020a0b06101002550b100d0d02550bb8fffab60c0c02550b
1000b8ffe6b41010025500b8fff8b40f0f025500b8fffcb40d0d0255002f
2b2b2bcd2f2b2b2bcd003f3fc0c010d0d0c0111217392b2b3130012b2b2b
001bb10602435458401f07200b0b065506200b0b065503200b0b06550420
0b0b065505200b0b065508b8fff240230b0b0655020c0b0b065503060c0c
0655020e0c0c0655090c0c0c06550a0c0c0c065507b8fff8b40d0d065508
b8fff8401f0d0d06552605010c200a12340f200a12340f050c0300010e0b
00080801020ab8ffeeb40b0b06550ab8ffeeb40c0c06550abb0256001200
100256400d000c0b0b065500060c0c065500b8fff8b40d0d065500012f2b
2b2bf42ff42b2b003f3c3f3c3c111217392b2b5d3130012b2b2b2b2b2b2b
2b002b2b2b2b2b1b407f00020f0814021b0804760c860cc80c03090c490c
490f032904250d2c0e58035b04760d780e870d080b020508390d360e4f02
4b03440740084d0d420e0a9802990396079608a803a7070612020f0e0e30
050214050502080c0d0d300508140505080c520f5201400102020808090a
0b0b0d0d0e0e1000080902601280120212ba02a8000d0131b2052008b801
31b50c090a0a0b0bb80140b4560a0a0c0cb801404009560a20400c7f0b01
0bba0256000e010bb2052002b8010bb20f0100410afff6000b000b014000
560000fff6000c000c0140b75600200f70100110b80256b7200560058005
0305b802a8b3113b59182b1910f45df45d3c18fd2b2b3c10ed1a1910edf4
5d3c1a18fd2b2b3c10ed1a1910ede45d00183f3f3c3c103c103c103c103c
103c103c1a10eded87052e2b877dc4872e182b877dc43130004bb00b534b
b01e515a58bd000cfffb0008ffd60002ffd638383859014bb00c534bb028
515ab00243b040505a58b9000dfff8b10e0a38385901435c58b9000dffd4
b621390e2c21390db8ffd4b637390e3237390db8ffd4b52d390e2c2d392b
2b2b2b2b2b5972715d00715d015d5959002b2b3311210116173637012111
231101230111980124015b30161935015f0105bbfe56affe5805bafbf291
48509b03fcfa4604cbfb3504e0fb2000>ArialMT AddT42Char 
2 15834 49 <0001009c0000051f05ba000901e2b303180c0cbe014000560008ffe8000c
000c0140b256120bb8ffc0400a13153408180c16025503b8ffe8b40c1602
5503b8fff4402311114255080c1111425508020303200708140707080207
0303080904020209070804034110fffb000c000c014000560003fff2000b
000b014000560003fffb000c000c0140b5560320060605b8ffecb40f0f02
5505b8fff2400b0d0d025505120c0c025505b8fff7401a0b0b0655055d20
0b01200b500b600b700b800b050b08090e0b0bb80140b456090a0c0cb801
40b45609200100b8ffc0400d13153420000100201010025500b8fff6b40f
0f025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b065500b8
fff7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b
2b2b2b5d2b3cfd2b2b3c105d71f42b2b2b2b3c10fd2b2b2b3c003f3c3f3c
1239390111393987042e2b877dc4b10602435458b90003ffe0b70c113408
200c1134002b2b592b2b31302b2b012b435c58b40840463903b8ffc0b646
390840323903b8ffc0b632390722193902b8ffdeb619390722323902b8ff
deb632390722233902b8ffde400b2339070e1439070e133902b8fff4b613
39070e1d3902b8fff4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b
012b2b2b2b2b2b002b2b2b2b59002b2b331133011133112301119cc70302
bac7fcfe05bafb81047ffa460480fb80>ArialMT AddT42Char 
3 0 50 <00020063ffe705dd05d4000e001b0133404b1a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b09154110fffe000c000c014000560015fff2000b000b014000560015ff
f6000c000d0140b656152620070107befff4000b000b014000560007ffe8
b41010025507b8ffeeb40d0d025507b8fff0b40c0c025507b8ffeab40b0b
065507b8fff4b40d0d065507b8fffa400e0c0c0655071a801d011d0f020c
0cb80140b4560f0e0b0bb80140b4560f0a0c0db80140400a560f26200001
00080b0bb80140b456000c0c0db8014040135600060b0b065500060c0c06
5500191c635c182b4e10f42b2b2b2b5d4ded2b2b2b4e105df62b2b2b2b2b
2b2b5d4ded2b2b2b003fed3fed3130015d71005d5d5d7113100021320412
1514020423222402371000333200113402262322006301880136cb0146ab
b4feb6bfcffebaa8c8011dd7db011b79e991cefed702ca016d019dc2fea5
dcdffea0b5c8015abefef7fecf0134011bb3010b93fee500>ArialMT AddT42Char 
3 414 51 <0002009e000004fd05ba000d00180107401e65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e0201020008124110fffe000c000c01400056
0012fff2000b000b014000560012fff8000d000d0140b356122608bbfff6
000d000d0140400e56080a0d0d025508100b0b065508b8fff440120c0c06
55081a201a01201a011a180d020c0cb80140b4560d0e0b0bb80140b4560d
0a0c0db80140400e560d200120000100201010025500b8fff6b40f0f0255
00b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b065500b8fffab4
0c0c065500b8fff0400a0d0d0655005d193b5c182b10f62b2b2b2b2b2b2b
5d3cfd2b2b2b3c4e10715df62b2b2b2b4ded2b2b2b003f3f3cfd3c12392f
3cfd3c3130015d005d33112132171e021514022121111121323635342627
2623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe8905ba0e12
65b66dbbfefdfdac03018c7f5c83150d>ArialMT AddT42Char 
3 1344 53 <000200a1000005ad05ba0018002202504021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17beffc0000b000b01400056
0017ffc040150b0b065517170021221e0201020018180f0f0e081e4110ff
fe000c000c01400056001efff2000b000b01400056001efff6000c000d01
40b5561e260e9c06b8ffe8b40f0f025506b8fff6b40d0d025506b8ffe040
190c0c025506060d0d0655065d20247024802403242218020c0cb80140b4
56180e0b0bb80140b456180a0c0db80140400e5618200120000100201010
025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255
00060b0b065500b8fff7b40c0c065500b8fff8400a0d0d0655005d233ba8
182b4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b2b3c105df62b2b2b2b19e418
ed2b2b2b003f3c103c103c3f3cfd3c12392f2b2bfd3c103c392f12173901
111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b2b2b2b2b002b
2b2b5d435c58400a08400f390f103a11123a2b2b2b590171435c58b9000e
ffde401a193911221939122219390e401c391022143910221f3910221539
2b2b2b2b2b2b2b5933112132161615140607161716171323032e02272623
231111213236363534262321a1028ac4cc7acad34d28554cfff4c2556e57
2d214be101a185964e97a3fe3005ba4fc8799cd61d25244e75fe71013184
8c380b07fd750333377947688600>ArialMT AddT42Char 
3 2048 54 <0001005cffe704eb05d30030031441110027fff8000d000d014000560026
fff8000d000d014000560025fff8000d000d0140b45618100c0cb80140b4
5619100c0cb80140b4561a100c0c411f01400056000dffe8000b000b0140
0056000cffe8000b000b01400056000bffe8000b000b01400056001cffe8
000b000b01400056001bffe8000b000b0140b45603180b0bb80140b45602
180b0bb80140b45601180b0bb80140402856630363047303740404252735
03391c430349074c1d451f44244627530359075c1d572889130e23b8fff2
b41010025524b8fff2b41010025525b8fff2b41010025526b8fff2b41010
025527b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525
b8fff6b40d10025526b8fff6b40d10025527b8fff640460d100255280d26
240224032725360f34234425452f5a20562355256c0b6a0d6b0e66146518
790b7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f
96151eb10602435458402d2126121b261a09262901260000291a12043231
2600650002000d2d791b891b021b25160d2d1e27250125051605b8fff440
0c0c0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d
1112395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e
1b08070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011a
ed16002d01b8ffc040120c0c02551001200150016001700190010601b801
b0400c2d1e20131342551e1e160305b8ffe0400d13134255051e2d091b26
1a4a094110fff4000c000c014000560009fff2000b000b014000560009ff
f8000d000d0140b656092600290129b8ffeab40e0e025529b8fff4400b0c
0c0255291a32210c0c0cb80140b456210e0b0bb80140b45621080d0db801
40b656212612012612b8ffecb40e0e025512b8fff6b40d0d025512b8fff8
400f0c0c02551254200001001931635b182b4e10f45d4de42b2b2bed10ed
2b2b2b4e10f62b2b5d4ded2b2b2bf4ed003fed2b3fed2b10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d712b2b2b2b2b2b2b2b2b2b2b002b2b2b13371e0233323636
353426272624272626353436363332161617072626232206151417160417
161615140606232224265cb70d5fc87d6faa53505c3bfe6c5169677ef294
a3f98605ba0fada9b0a1393801d958807a86fb9dc7fef39901d7106e8d57
42734445672317612b37a3656fc16469cc810e8b8e815b4f33336b283bb5
7675cf7374e9>ArialMT AddT42Char 
3 2984 55 <00010030000004ba05ba000700fcb306020c0cb80140b45607020c0cb801
40b45606070b0bb80140b45607070b0b410d014000560001fff9000b000b
014000560000fff9000b000b0140b45606050c0db80140b45607050c0d41
0d014000560001fffb000c000d014000560000fffb000c000d0140400e56
05021e04030200080706050409b80273b320040104b80101b7062001022f
030103b80101b5010120000100b8ffe8400b1010025500080f0f025500b8
fff2b40c0c025500b8ffe2b40d0d025500b8fffcb40c0c065500b8fffeb4
0d0d065500b80273b308b699182b10f62b2b2b2b2b2b5d3c10f45d3c10fd
e45de6103c103c003f3f3cfd3c3130012b2b2b2b2b2b2b2b2b2b21112135
211521110213fe1d048afe1b050dadadfaf3>ArialMT AddT42Char 
3 7598 68 <0002004affe8041c043e0028003702de402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030ebbfffa
000b000b0140b7560e0c0f0f02550eb8ffeab4101002550eb8fff4401410
1006550e0c0d0d06550e060f0f06550e260d0db80140b4560e180c0cb801
40b5560e0e1c0317b802aab3182c0b0bb80140400e56182c0a0a42551895
141c1c0700b8fff440110c0c06550045270a321c030b29611061004110ff
f6000b000b014000560000fff8000c000c014000560000fffc000d000d01
40400b5600060d0d025500252124b8ffecb41010025524b8ffec400b0d0d
025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b065524b8ffdc
400b1010065524060f0f065524b8fffcb40c0c065524b8025b400e274000
26102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e025526bb
fff4000d000d0140b356263139b8ffc0400d1e23343039c03902a0390139
17b8fff4b71010065517080c0cb80140400956172518222f080d0db80140
b4562f0c0c0cb80140b4562f0e0b0bb801404011562f24bf06cf06021f06
3f060206140b0bb80140b45606140d0db80140b45606080c0cb80140402e
56060e0f0f0255060c0d0d025506180c0c0255060c0b0b0255060c0b0b06
55060e0d0d065506100c0c065506313810f62b2b2b2b2b2b2b2b2b2b5d71
ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b2b2b2b2b3cfd2b
2b2b2be5e5003fed3fe42b3fedfd2b2be41112392f2b2b2b2b2b2b2b2b5d
71ed711112391112393901111217393130005d2b2b2b2b01715d2b2b0071
250606232226353436363736373637363534272623220607273e02333216
161716151514161723260306070e02151416333236373635033c64b96aaf
bc477348356bda67013345887f791db0186ed08988aa5010091722bc1c17
62c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e2d3d59
7118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f3d7700
>ArialMT AddT42Char 
3 8498 69 <00020086ffe8041f05ba0010001d01e7407b01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b184110fff8000d000d01
4000560018fff4000c000c014000560018fff2000b000b01404022561824
d00b01100b400b600b800b041f400d0d02550b0c0f0f02550b180d0d0255
0bb8fff6b40c0c02550bb8fff0b40b0b06550bb8fff4b40f0f06550bb8ff
e0b40c0c06550bb8fff4400b0d0d06550b740111020d0db80140b4561108
0c0cb80140b656113300120b0bb80140b45600040d0db801404013560004
0c0c025500040d0d06550033030c0c0cb80140b45603080d0db801404019
5603250202c001019001a001b001f001041f013f014f010301b8fffeb410
10025501b8fffc401d0e0e0255010c0d0d025501100c0c025501120b0b02
55010c0b0b065501b8fff8b41010065501b8fffc40160f0f065501180c0c
065501140d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b2b2b5d71
723c4d10fd2b2bf42b2b2b2be42b2b10fd2b2b2b2b2b2b2b2b5d71ed2b2b
2b003fed3f3fed3f11391112393130005d015d7172007121231133113633
321e0215100023222703141716333236353426232206012da7b472b162af
7140fef2bdbc6b0234559176aca57576ac05bafdf58f4f8fca73feeffed6
9d0196bf558bcdcbd0c6cd00>ArialMT AddT42Char 
3 9080 70 <00010050ffe803ed043e001a022fbc0017fff0000c000c0140b4560a080c
0cb80140b45609080c0cb80140b4560f080c0cb80140b45610080c0cb801
40b45611080c0cb901400056b1020243545840340e7f0f010f0b01400050
007000030004121c0b07181c040b010e1507080e0e0255070c0d0d025507
0c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d3210
c45d3231301b4047090c011f1c4313431753135317601360179b029b039a
0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60ab50c
0c160c860ce302030e225f0f6f0f7f0f030f01b802aa4026300040005000
600070009000a000e000f00009000f0f0b000004121c0b07181c040b1c0f
010f410afff4000c000c01400056000ffff2000b000b0140400f560f240e
080d0d06550e221b000100410afff4000c000c014000560000ffee000b00
0b0140400f5600240b2b1f010100010101400e2bb80140b45601400d0db8
0140b45601400c0cb80140b45601360b0bb8014040205601400b0b065501
401010065501480c0c0655011a0d0d065501491c15080d0db80140b45615
0c0c0cb80140b456150e0b0bb801404021561524cf07011f073f0702070e
0b0b0655070a1010065507120c0c0655070c0d0db80140b456070c0c0cb8
0140b65607311b34c4182b10f62b2b2b2b2b5d71ed2b2b2b10f62b2b2b2b
2b2b2b2b5d724b53234b515a58b90001ffc03859ed2b2b72f42bed2b2b72
003fed3fed12392f11392f105de4105de43130005d71015d7159012b2b2b
2b2b2b011706062322001134123633321617072626232206151416333236
033cb11defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf
011d010aac010281afa11b6b6cc3d3d6c282>ArialMT AddT42Char 
3 9728 71 <00020046ffe803df05ba0011001d01e5407c0a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b18410afff8000d000d
014000560018fff8000c000c0140b45618330100bbfff2000b000b0140b4
560025110f4110fff8000d000d01400056000ffff4000c000c0140005600
0ffff2000b000b01404024560f251010d011011011401160118011041f40
0b0b02551f400d0d025511121010025511b8fff440110f0f025511060e0e
025511180d0d025511b8fff2400b0b0b0655110e1010065511b8ffeeb40c
0c065511b8fff8b40d0d065511bbfff8000c000c0140b656117412080d0d
b80140b456120c0c0cb80140b456120e0b0bb80140b656122407100c0cb8
0140b45607100d0db80140403b56bf07cf07df07ff07041f073f074f0703
071e0b0b025507180c0c0255071e0d0d0255070c0b0b0655070c0d0d0655
071a0c0c065507191e3450182b4e10f42b2b2b2b2b2b5d712b2b4ded2b2b
2bfd2b2b2b2b2b2b2b2b2b2b2b5d713c10ed2b2b2b10fd2b3ce42b2b003f
ed3f3c3fed3f3c11391112393130005d01715d0071213506232226263534
123633321617113311011416333236353426232206033865c47fd5756ad4
8360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a5141020efa46
0212cccac1c6daccc400>ArialMT AddT42Char 
3 11856 75 <00010087000003e805ba001401a8b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe040151719341708110c1114030501
000f1c0507140b0a0c4110fff8000d000d01400056000cfff2000b000b01
400056000cfff4000c000c01404027560c250940333634ff0901c0090116
400b0b025516401010025509281010025509140e0e025509b8ffec40110d
0d025509040c0c0255091a0b0b025509b8fff6400b0b0b06550914101006
5509b8fff8400b0d0d0655090a0f0f065509b8fff6b60c0c0655094e16b8
ffc04017343634b016f016027016a016b016ff1604160214080d0db80140
b456140c0c0cb80140b456140e0b0bb80140b45614250100b8ffc0401033
3634f0000100002000d000e0000400b8fffab41010025500b8fffa40170e
0e025500040c0c025500080b0b025500040b0b065500b8fffa40160f0f06
5500020c0c065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b
5d712b3cfd2b2b2b3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed
2b2b2b003f3c3fed3f1139113901123931304379400e060e07250e060c1b
010d080f1b01002b012b2b81002b5d2b012b331133113633321616151123
11342623220606151187b47ec076ae4bb4756b508d3c05bafdf2925da49c
fd5f02a1877b538e7dfdbb00>ArialMT AddT42Char 
3 12348 76 <000200880000013c05ba0003000701f2b3020a0b0bb80140b456030a0b0b
b80140b456060a0b0bb80140b456070a0b0b4119014000560001fffc000b
000b014000560000fffc000b000b014000560005fffc000b000b01400056
0004fffc000b000b0140b456020b0c0cb80140b456030b0c0cb80140b456
060b0c0cb80140b456070b0c0c4119014000560001fffd000c000c014000
560000fffd000c000c014000560005fffd000c000c014000560004fffd00
0c000c0140b45602040d0db80140b45603040d0db80140b45606040d0db8
0140b45607040d0d4119014000560001fffc000d000d014000560000fffc
000d000d014000560005fffc000d000d014000560004fffc000d000d0140
40375609360b0b02554f099009a009b009c009df09f0090700091f097009
80099f09b009c009df09e009ff090a1f0901000107040203090603bbffc0
000d000d0140402a56037e0100060506040a0607250500049f04a004b004
c004e00406c004f0040200042004d004e0040404b8fff8b41010025504b8
fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8ffea
b41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e08475018
2b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed2b011112393911
1239393130015d72712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b133533150311331188b4b4b404ebcfcffb150426fbda>ArialMT AddT42Char 
3 14114 79 <000100830000013705ba00030170b3020a0b0bb80140b456030a0b0b410d
014000560001fffc000b000b014000560000fffc000b000b0140b456020b
0c0cb80140b456030b0c0c410d014000560001fffd000c000c0140005600
00fffd000c000c0140b45602040d0db80140b45603040d0d410d01400056
0001fffc000d000d014000560000fffc000d000d0140b75605360b0b0255
05b8ffc0b337383405b8ffc0b334353405b8ffc0b330313405b8ffc0b322
253405b8ffc040251517340f051f059f05df05044f05df05f005031f0570
058005ff05040100000a0203250100b8ffc0b337383400b8ffc040153335
349f0001c000f0000200002000d000e0000400b8fff8b41010025500b8ff
fa401d0e0e025500040c0c0255000a0b0b025500140b0b06550008101006
5500b8fffeb40d0d065500b8ffffb40c0c065500b8fffc400a0c0c065500
4e044750182b10f62b2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130
015d71722b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b3311331183b405ba
fa46>ArialMT AddT42Char 
3 15440 81 <00010087000003e6043e001601c440130503061302a810b810e303e713f0
03f6130604b8fff040220b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e4110fff8000d000d01400056000efff2
000b000b01400056000efff4000c000c0140401c560e2418401010025518
400b0b02550b28101002550b140e0e02550bb8ffec40110d0d02550b040c
0c02550b220b0b02550bb8fff4400b0b0b06550b14101006550bb8fff940
0b0d0d06550b0a0f0f06550bb8fff640120c0c06550b40333634ff0b01ff
0b010b4e18b8ffc0401a343634b018f018027018a018b018c01804180302
331516080d0db80140b456160e0b0bb80140b456160c0c0cb80140b45616
250100b8fff6b41111025500b8fffab41010025500b8fffa40170e0e0255
00040c0c0255000a0b0b025500040b0b065500b8fffa40110f0f06550002
0c0c065500040d0d065500b8ffc04012333634f0000100002000d000e000
04004e1710f65d712b2b2b2b2b2b2b2b2b2b3cfd2b2b2b3cf43c105d712b
f65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b2b3c103c003f3c3f3fed11
390112393130437940160611090a080a070a0306102611060e1b010f0a12
1b01002b012b2b2a81015d71002b5d713311331536333216161716151123
11342626232206151187a275dd60a150100ab42a6b4873a7042697af4570
4d327dfd7302866e6d4192ccfdbc>ArialMT AddT42Char 
4 566 83 <00020087fe690421043e0012001e01aa40740c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e194110fff2000b000b014000560019fff4
000c000c014000560019fff8000d000d0140401c561924d00a01100a400a
600a800a0420400b0b025520400d0d02550ab8ffe6400b0f0f02550a180d
0d02550ab8fffab40c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f0655
0ab8ffe8400f0c0c06550a74011333023312080d0db80140b456120e0b0b
b80140b456120c0c0cb8014040195612250000c001019001a001b001f001
041f013f014f010301b8fffc401d0e0e025501100d0d025501100c0c0255
01100b0b0255010c0b0b065501b8fff6b41010065501b8fffc40160f0f06
55010c0c0c065501120d0d065501191f473718012b4e10f42b2b2b2b2b2b
2b2b2b5d71723c4d10fd2b2b2bf4e410fd2b2b2b2b2b2b2b2b5d71ed2b2b
2b003f3fed3f3fed113912393130005d015d717200711311331536363332
161615140206232226271103141633323635342623220687a43a926888d0
6a75df7b5a8f2e11a67678aba77473b1fe6905bd8a51518cff98a3fefb8b
4c3afdfb03a4cdc4cbd5cbcad700>ArialMT AddT42Char 
4 1880 86 <0001003fffe803b1043e003003e6b3170e0b0bb80140b456180e0b0bb801
40b456190e0b0b4137014000560028fff4000c000c014000560027fff400
0c000c014000560026fff4000c000c014000560025fff4000c000c014000
560024fff4000c000c014000560023fff4000c000c014000560022fff400
0c000c014000560021fff4000c000c014000560020fff4000c000c014040
7c56042214223a094a094424562265227c098e098424a613ab2cc2030d09
171a1817304b2cd617051b025502021032010a185c085c095c0a5c0b5c0c
5c0d6a086a096a0a6a0b6a0c6a0db426b4270f27262427242936245a0a59
0b64266428742374248024930a9c0c9228972c9530a40aa90ca327a428b3
26c5261628b8fff4b40d0d065522b8fff4b40d0d065523b8fff4b40d0d06
5524b8fff4b40d0d065528b8fff4b40c0c065522b8fff4b40c0c065523b8
fff4b40c0c065524b8fff4b40c0c06551db8ffde40121e395a0827250c0a
041a202615040b2e1d1ab802aa4022192c0b0b02551f193f194f195f19af
19cf19060f191f196f19df19041f198f190219bd02550015000002aa0001
ffc040140b0b025510014001021001d00102000110010201b8ffc0b31416
3401b8ffc040100e113401012e5c1d6c1d021d1c150704b8fff4b40b0b02
5504b8ffe6b41010065504b8ffe640130f0f0655041c2e0b1f1a011a2419
4013183432b8ffc040320f0f025519180f0f025519180d0d025519160c0c
025519201010065519200f0f065519100c0c065519160d0d065519160c0c
4109014000560019025b0007fff2000b000b0140b35607242ab8ffc0b51c
39d02a012ab8ffe6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06
552ab8ffeab40d0d06552abbfff4000c000c0140b3562a1a32b8ffc04021
272a346032c032023f3280320232100101012400180d0d025500100d0d06
550020b8fff4b40d0d025520b8fff4b41010065520b8fff4b70f0f065520
0e0b0bb8014040165620240f100b0b02550f160c0c02550f200d0d02550f
b8fffa40140f0f02550f0e0c0c06550f0c0d0d06550f060c0cb801404011
560f22df00013f004f00020019313437182b4e10f45d714df42b2b2b2b2b
2b2bed2b2b2b2b102b2bed724e105d712bf62b2b2b2b2b712b4ded2bf42b
2b2b2b2b2b2b2b2b2bed72003fed2b2b2b3fed7112392f2b2b5d71722be4
10fd5d71722be41112391112390111121739313043794040272d1e230514
2c261110121013100306220d201b000928071b01052d071b011e14201b00
210e231b0022230d0c08290a1b012827090a062b041b001f101d1b01002b
2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b2b2b2b2b2b2b2b
2b5d71015d72715d002b2b2b2b2b2b2b2b2b012b2b2b1337161633323635
342726272e02353436373636333216161707262623220615141716171617
1e02151406062322263fb20f897b7c78352593c6994f41382a91537dbd5a
11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b7265443d2318
253249814e4779281f2b487b6718525c5237231c1d130a2433417c5c5a9f
57ac>ArialMT AddT42Char 
4 3022 87 <00010024fff2022a0599001701394120000cfffe000c000c01400056000b
fffe000c000c014000560008fffe000c000c014000560007fffe000c000c
014000560006fffe000c000c01400056000affc0b323263409b8ffc04024
23263480190100010c0d0a0103001610092b0f0a06161c030b0f10220022
010d12080d0db80140b456120e0b0bb80140b456120a0c0cb80140402256
12250c01ff070845094560077007800790070400072007a007b007c007d0
070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e025507
b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8fff0
400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136b1
66182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c10e4f43c
003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b2b251706
23222626351123353311371133152311141616333202101a4c3c626c2c84
84b3b5b5132b281ea19f103e65a202638c01076cfe8d8cfd934d2c1a>ArialMT AddT42Char 
4 3410 88 <00010083ffe803e0042600180196b9001affc0400915173402201316340f
b8fff040191214342b1301240813160c0113160b06000a111c030b003316
4110fff8000d000d014000560016fff2000b000b014000560016fff4000c
000c0140401c5616251817403336341a401010025517281010025517120e
0e025517b8ffec400b0d0d025517040c0c025517b8fff4400b0b0b065517
141010065517b8fff8400b0d0d0655170c0f0f065517b8fff6400d0c0c06
55ff1701c01701174e1ab8ffc04016343634b01af01a02701aa01ab01aff
1a041a0c080d0db80140b4560c0e0b0bb80140b4560c0c0c0cb80140b356
0c2509b8ffc04010333634f0090100092009d009e0090409b8fff8b41010
025509b8fff840110e0e025509040c0c0255090a0b0b065509b8fff64016
0f0f065509020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b
2b2b5d712bed2b2b2b105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfd2b
2b2be4003fed3f3f3c39390111123931304379401a04100e0d0f0d020607
0806080508030610040c1b000d08111b00002b012b2a2a81005d012b2b2b
21350623222626272635113311141716163332363635113311033f7cd55e
a34f100bb40b116e51518e3bb49cb4486d4f35730292fdb38d314751538f
880239fbda00>ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>ArialMT AddT42Char 
ArialMT /CharStrings get begin
/period 17 def
/one 20 def
/two 21 def
/A 36 def
/B 37 def
/C 38 def
/F 41 def
/G 42 def
/H 43 def
/I 44 def
/L 47 def
/M 48 def
/N 49 def
/O 50 def
/P 51 def
/R 53 def
/S 54 def
/T 55 def
/a 68 def
/b 69 def
/c 70 def
/d 71 def
/h 75 def
/i 76 def
/l 79 def
/n 81 def
/p 83 def
/s 86 def
/t 87 def
/u 88 def
end
ArialMT /Encoding get
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
end
%ADOEndSubsetFont
/DQLYII+ArialMT /ArialMT findfont ct_VMDictPut
/DQLYII+ArialMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 14{/.notdef}rp /A /B 
/C 2{/.notdef}rp /F /G /H /I 2{/.notdef}rp /L 
/M /N /O /P /.notdef /R /S /T 
12{/.notdef}rp /a /b /c /d 3{/.notdef}rp /h /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u 138{/.notdef}rp]
DQLYII+ArialMT nf
DQLYII+ArialMT*1 [9 0 0 -9 0 0 ]msf
168.167 34.3627 mo
(FP.L)
[5.49893 6.00293 2.50201 0 ]xsh
189.807 259.783 mo
(INS.L)
[2.50198 6.49786 6.00293 2.50201 0 ]xsh
146.047 262.883 mo
(F1.L)
[5.49893 5.004 2.50198 0 ]xsh
165.317 207.323 mo
(F2.L)
[5.49893 5.004 2.50201 0 ]xsh
142.627 221.103 mo
(PRG.L)
[6.00293 6.49786 7.00201 2.50198 0 ]xsh
14.2666 169.943 mo
(TP.L)
[5.49893 6.00293 2.502 0 ]xsh
221.327 245.403 mo
(T1a.L)
[5.49893 5.004 5.004 2.50198 0 ]xsh
165.957 104.103 mo
(T2p.L)
[5.49893 5.004 4.689 2.50201 0 ]xsh
217.137 202.773 mo
(SGa.L)
[6.00293 7.00201 5.00397 2.50201 0 ]xsh
143.717 38.6627 mo
(SC.L)
[6.00293 6.49786 2.50201 0 ]xsh
18.2266 197.513 mo
(CGa.L)
[6.49786 7.002 5.004 2.502 0 ]xsh
179.307 170.403 mo
(FOC.L)
[5.49893 7.00201 6.49786 2.50198 0 ]xsh
65.7166 170.983 mo
(PHp.L)
[6.00293 6.49786 4.689 2.502 0 ]xsh
71.4166 262.603 mo
(LG.L)
[5.004 7.002 2.502 0 ]xsh
102.287 21.7727 mo
(TFp.L)
[5.49893 5.49893 4.689 2.50201 0 ]xsh
201.557 84.2227 mo
(CO.L)
[6.49786 7.00198 2.50201 0 ]xsh
229.047 55.2627 mo
(PO.L)
[6.00293 7.00198 2.50201 0 ]xsh
263.327 185.753 mo
(PP.)sh
277.835 185.753 mo
(L)sh
73.7366 42.3627 mo
(PT.L)
[6.00293 4.41893 2.502 0 ]xsh
99.6466 118.933 mo
(Thal.L)
[5.49893 5.004 5.004 1.99786 2.50198 0 ]xsh
95.1166 217.433 mo
(Caud.L)
[6.49786 5.004 5.004 5.004 2.50201 0 ]xsh
41.5166 133.453 mo
(Bst)sh
54.5216 133.453 mo
(.L)
[2.502 0 ]xsh
60.4866 81.3027 mo
(FP.R)
[5.49893 6.00293 2.502 0 ]xsh
58.8966 234.973 mo
(INS.R)
[2.502 6.49786 6.00293 2.502 0 ]xsh
125.067 240.543 mo
(F1.R)
[5.49893 5.004 2.50201 0 ]xsh
261.637 109.963 mo
(F2.R)
[5.49893 5.004 2.50201 0 ]xsh
19.7366 107.983 mo
(T1p.R)
[5.49893 5.004 4.689 2.502 0 ]xsh
218.817 133.623 mo
(AG.R)
[5.73294 7.00198 2.50201 0 ]xsh
121.037 278.013 mo
(SMC)sh
141.034 278.013 mo
(.R)
[2.50201 0 ]xsh
98.4866 266.393 mo
(PCN.R)
[6.00293 6.49786 6.49786 2.50198 0 ]xsh
85.7966 239.283 mo
(Put.R)
[6.00293 5.004 2.502 2.502 0 ]xsh
58.4366 212.093 mo
(Pall.R)
[5.64293 5.004 1.99786 1.99786 2.502 0 ]xsh
188.327 31.2527 mo
(OP.L)
[7.00201 6.00293 2.50198 0 ]xsh
166.987 266.883 mo
(SMC)sh
186.984 266.883 mo
(.L)
[2.50201 0 ]xsh
39.8766 176.063 mo
(Bst)sh
52.8816 176.063 mo
(.R)
[2.502 0 ]xsh
235.577 233.153 mo
(TO2.L)
[5.13895 7.00198 5.004 2.50198 0 ]xsh
150.737 89.4027 mo
(T2p.R)
[5.49893 5.004 4.689 2.50201 0 ]xsh
221.977 184.513 mo
(SPL)sh
238.986 184.513 mo
(.R)
[2.50201 0 ]xsh
124.617 23.7527 mo
(Hip.L)
[6.49786 1.99786 4.689 2.50201 0 ]xsh
128.647 57.5027 mo
(OP.R)
[7.00201 6.00293 2.50198 0 ]xsh
6.88663 217.443 mo
(CGa.R)
[6.49786 7.002 5.004 2.502 0 ]xsh
175.197 151.823 mo
(TFa.L)
[5.49893 5.04892 5.004 2.50201 0 ]xsh
90.0266 169.353 mo
(PHa.R)
[6.00293 6.49788 5.00397 2.50201 0 ]xsh
213.497 68.0927 mo
(PO.R)
[6.00293 7.00198 2.50201 0 ]xsh
265.697 165.783 mo
(TP.R)
[5.49893 6.00293 2.50198 0 ]xsh
52.7466 43.2227 mo
(PP.)sh
67.2545 43.2227 mo
(R)sh
71.3566 125.073 mo
(Thal.R)
[5.49893 5.004 5.004 1.99786 2.502 0 ]xsh
119.807 125.863 mo
(Caud.R)
[6.49786 5.004 5.004 5.004 2.50201 0 ]xsh
6.53664 135.273 mo
(Accb)sh
26.5436 135.273 mo
(ns.L)
[5.004 4.36501 2.502 0 ]xsh
49.2966 104.123 mo
(TFa.R)
[5.49893 5.04893 5.004 2.502 0 ]xsh
242.927 96.5327 mo
(PRG.R)
[6.00293 6.49786 7.00198 2.50201 0 ]xsh
15.5966 86.5627 mo
(H.R)
[6.49786 2.502 0 ]xsh
236.237 139.013 mo
(OLs.R)
[7.00198 5.00403 4.36499 2.50198 0 ]xsh
/DQLYIH+AdobePiStd*1 uf
/DQLYIH+AdobePiStd uf
/AdobePiStd uf
/DQLYII+ArialMT*1 uf
/DQLYII+ArialMT uf
/ArialMT uf
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
